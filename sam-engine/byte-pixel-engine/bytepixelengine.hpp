/**
 *                        بِسْمِ اللَّهِ الرَّحْمَنِ الرَّحِيمِ
 * 
 * bytepixelengine.hpp
 * 
 * Copyright (c) 2024-present Scorpion Anti-malware (see AUTHORS.md).
 * 
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 * 
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * 
 */

#ifndef SAM_BYTE_PIXEL_ENGINE_HPP
#define SAM_BYTE_PIXEL_ENGINE_HPP

/**
 * @brief The directory containing the Python module
*/
#ifndef BYTE_PIXEL_ENGINE_SCRIPTS_DIR
#error "BYTE_PIXEL_ENGINE_SCRIPTS_DIR is not defined"
#endif

#ifndef SAM_STATIC_CNN_COLORMAP
#error "SAM_STATIC_CNN_COLORMAP is not defined"
#endif

// // It is recommended to always define PY_SSIZE_T_CLEAN before including Python.h. See https://docs.python.org/3/c-api/arg.html#arg-parsing for a description of this macro.
// #define PY_SSIZE_T_CLEAN

// // Since Python may define some pre-processor definitions which affect the standard headers on some systems, you must include Python.h before any standard headers are included.
// #include <Python.h>

#include <pybind11/embed.h>
namespace py = pybind11;

#include <string>
#include <vector>

class BytePixelEngine {
 public:
  BytePixelEngine();
  ~BytePixelEngine();

  bool init();

  bool get_byte_pixel_features(const std::string& pe_file_path, std::vector<float>& features_buffer);

  private:
  PyObject* pModule;
  PyObject* pFunc;
}; // class BytePixelEngine

#endif // SAM_BYTE_PIXEL_ENGINE_HPP
