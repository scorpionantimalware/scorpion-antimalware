# Caching the library name to be used in the parent scope.
set(BYTE_PIXEL_ENGINE "byte_pixel_engine" CACHE STRING "Byte Pixel Engine library name.")

file(GLOB BYTE_PIXEL_ENGINE_HPP_FILES 
    ${CMAKE_CURRENT_SOURCE_DIR}/bytepixelengine.hpp
)

file(GLOB BYTE_PIXEL_ENGINE_CPP_FILES 
    ${CMAKE_CURRENT_SOURCE_DIR}/bytepixelengine.cpp
)

# Safety check: Ensure that all the files exist.
foreach(file ${BYTE_PIXEL_ENGINE_CPP_FILES} ${BYTE_PIXEL_ENGINE_HPP_FILES})
    if(NOT EXISTS "${file}")
        message(FATAL_ERROR "File '${file}' does not exist!")
    endif()
endforeach()

add_library(${BYTE_PIXEL_ENGINE} SHARED 
    ${BYTE_PIXEL_ENGINE_CPP_FILES} 
)

set_target_properties(${BYTE_PIXEL_ENGINE} PROPERTIES VERSION ${SAM_PROJECT_VERSION})

# The Python_LIBRARIES variable comes from the find_package(Python) call in the parent scope.
# Replace PYTHON_LIBRARIES with Python_LIBRARIES in the future.
target_link_libraries(${BYTE_PIXEL_ENGINE} PUBLIC 
    pybind11::embed
)

# The Python_INCLUDE_DIRS variable comes from the find_package(Python) call in the parent scope.
# Replace PYTHON_INCLUDE_DIRS with Python_INCLUDE_DIRS in the future.
target_include_directories(${BYTE_PIXEL_ENGINE} PUBLIC 
    "${CMAKE_CURRENT_SOURCE_DIR}" 
    "${pybind11_INCLUDE_DIRS}" 
)

# A Path to the scripts directory.
set(BYTE_PIXEL_ENGINE_SCRIPTS_DIR "${CMAKE_CURRENT_SOURCE_DIR}/scripts")

target_compile_definitions(${BYTE_PIXEL_ENGINE} PUBLIC
    BYTE_PIXEL_ENGINE_SCRIPTS_DIR="${BYTE_PIXEL_ENGINE_SCRIPTS_DIR}"
    SAM_STATIC_CNN_COLORMAP="${SAM_STATIC_CNN_COLORMAP}"
)

# Install the library.
# This is for CPack to be able to package the library.
install(TARGETS ${BYTE_PIXEL_ENGINE} RUNTIME DESTINATION .)

