#include "bytepixelengine.h"
#include <iostream>

BytePixelEngine::BytePixelEngine() : pModule(nullptr), pFunc(nullptr) {
    std::cout << "BytePixelEngine constructor" << std::endl;
    // Append the directory containing your Python module to sys.path
    // PyObject* sysPath = PySys_GetObject((char*)"path");
    // PyList_Append(sysPath, PyUnicode_FromString(BYTE_PIXEL_ENGINE_SCRIPTS_DIR));
    // BytePixelEngine::pModule = PyImport_ImportModule("get_byte_pixel_features");
    // if (BytePixelEngine::pModule == nullptr) {
    //     std::cerr << "Error: Failed to import Python module" << std::endl;
    //     PyErr_Print();
    // }
    // // Get a reference to the function you want to call
    // BytePixelEngine::pFunc = PyObject_GetAttrString(pModule, "get_byte_pixel_features");
    // if (BytePixelEngine::pFunc == nullptr) {
    //     std::cerr << "Error: Failed to get get_byte_pixel_features function" << std::endl;
    //     PyErr_Print();
    // }
}

void BytePixelEngine::get_byte_pixel_features(const std::string& file_path) {
    // FeaturesArray result;
    // Initialize result with default values
    // result.features = nullptr;
    // result.size = 0;
    // // Call the Python function get_byte_pixel_features with the provided file_path
    // PyObject* pArgs = PyTuple_New(1);
    // PyTuple_SetItem(pArgs, 0, PyUnicode_FromString(file_path.c_str()));
    // PyObject* pReturn = PyObject_CallObject(pFunc, pArgs);
    // if (pReturn != nullptr) {
    //     // Check if the returned object is a list
    //     if (PyList_Check(pReturn)) {
    //         Py_ssize_t listSize = PyList_Size(pReturn);
    //         result.size = static_cast<size_t>(listSize);
    //         // Allocate memory for the C++ array
    //         result.features = new double[result.size];
    //         // Convert Python list to C++ array
    //         for (Py_ssize_t i = 0; i < listSize; ++i) {
    //             PyObject* pItem = PyList_GetItem(pReturn, i);
    //             if (PyFloat_Check(pItem)) {
    //                 result.features[i] = PyFloat_AsDouble(pItem);
    //             } else {
    //                 // Handle error: unexpected type in the list
    //                 // Cleanup allocated memory if needed
    //                 delete[] result.features;
    //                 result.features = nullptr;
    //                 result.size = 0;
    //                 break;
    //             }
    //         }
    //     } else {
    //         std::cerr << "Error: Unexpected return type from get_byte_pixel_features" << std::endl;
    //         PyErr_Print();
    //     }
    //     Py_DECREF(pReturn);
    // } else {
    //     std::cerr << "Error: Failed to call get_byte_pixel_features" << std::endl;
    //     PyErr_Print();
    // }
    // Py_DECREF(pArgs);
    // return result;
}

BytePixelEngine::~BytePixelEngine() {
    // std::cout << "BytePixelEngine destructor" << std::endl;
    // if (BytePixelEngine::pFunc != nullptr) {
    //     Py_DECREF(BytePixelEngine::pFunc);
    // }
    // if (BytePixelEngine::pModule != nullptr) {
    //     Py_DECREF(BytePixelEngine::pModule);
    // }
}
