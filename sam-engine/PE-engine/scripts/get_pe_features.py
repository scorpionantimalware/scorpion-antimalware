###################################################################################
#                                                                                 #
# get_pe_features.py                                                              #
#                                                                                 #
###################################################################################
#                                                                                 #
#    Scorpion Anti-malware is a free Open Source AI-powered Anti-malware          #
#    framework for Researchers.                                                   #
#                                                                                 #
#    Copyright (c) 2024-present  (see AUTHORS.md).                                #
#                                                                                 #
#    This program is free software: you can redistribute it and/or modify         #
#    it under the terms of the GNU General Public License as published by         #
#    the Free Software Foundation, either version 3 of the License, or            #
#    (at your option) any later version.                                          #
#                                                                                 #
#    This program is distributed in the hope that it will be useful,              #
#    but WITHOUT ANY WARRANTY; without even the implied warranty of               #
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                #
#    GNU General Public License for more details.                                 #
#                                                                                 #
#    You should have received a copy of the GNU General Public License            #
#    along with this program.  If not, see <https://www.gnu.org/licenses/>.       #
#                                                                                 #
###################################################################################


from ember import PEFeatureExtractor
import pickle
from typing import List
import os


def get_pe_features(pe_file_path: str, standardize_params_file_path: str, features_buffer: List[float]) -> bool:
    """
    Extracts features from a PE file and standardizes them using the provided standardization parameters.

    Parameters:
        pe_file_path (str): The path to the PE file.
        standardize_params_file_path (str): The path to the standardization parameters file.
        features_buffer (List[float]): The buffer to store the standardized features.

    Returns:
        bool: True if the features were successfully extracted and standardized, False otherwise.
    """
    # Check if the PE file exists
    if not os.path.exists(pe_file_path):
        print("Error: PE file '{}' not found".format(pe_file_path))
        return False

    # Check if the standardization parameters file exists
    if not os.path.exists(standardize_params_file_path):
        print("Error: Standardization parameters file '{}' not found".format(standardize_params_file_path))
        return False

    # Check if the PE file is readable.
    if not os.access(pe_file_path, os.R_OK):
        print("Error: Cannot read PE file '{}'".format(pe_file_path))
        return False

    # Check if the standardization parameters file is readable.
    if not os.access(standardize_params_file_path, os.R_OK):
        print("Error: Cannot read standardization parameters file '{}'".format(standardize_params_file_path))
        return False

    pe_features = None
    with open(pe_file_path, "rb") as f:
        extractor = PEFeatureExtractor()
        pe_features = extractor.feature_vector(f.read())

    if pe_features is None:
        print("Error: Failed to extract features from PE file '{}'".format(pe_file_path))
        return False

    pe_features = pe_features.tolist()

    # Load standardization parameters
    mean, std = None, None
    with open(standardize_params_file_path, "rb") as f:
        mean, std = pickle.load(f)

    if mean is None or std is None:
        print("Error: Failed to load standardization parameters from file '{}'".format(standardize_params_file_path))
        return False

    mean = mean[0].tolist()
    std = std[0].tolist()

    for i in range(len(pe_features)):
        features_buffer.append((pe_features[i] - mean[i]) / std[i])

    print("Successfully extracted features from PE file '{}'".format(pe_file_path))

    return True
