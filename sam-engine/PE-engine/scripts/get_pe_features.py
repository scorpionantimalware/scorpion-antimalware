from ember import PEFeatureExtractor
import pickle
from typing import List
import os

def get_pe_features(pe_file_path: str, standardize_params_file_path: str, features_buffer: List[float]) -> bool:
    # Check if the PE file exists
    if not os.path.exists(pe_file_path):
        print("Error: PE file '{}' not found".format(pe_file_path))
        return False

    # Check if the standardization parameters file exists
    if not os.path.exists(standardize_params_file_path):
        print("Error: Standardization parameters file '{}' not found".format(standardize_params_file_path))
        return False
    
    # Check if the PE file is readable.
    if not os.access(pe_file_path, os.R_OK):
        print("Error: Cannot read PE file '{}'".format(pe_file_path))
        return False

    # Check if the standardization parameters file is readable.
    if not os.access(standardize_params_file_path, os.R_OK):
        print("Error: Cannot read standardization parameters file '{}'".format(standardize_params_file_path))
        return False
    
    pe_features = None
    with open(pe_file_path, "rb") as f:
        extractor = PEFeatureExtractor()
        pe_features = extractor.feature_vector(f.read())

    if pe_features is None:
        print("Error: Failed to extract features from PE file '{}'".format(pe_file_path))
        return False
    
    pe_features = pe_features.tolist()

    # Load standardization parameters
    mean, std = None, None
    with open(standardize_params_file_path, 'rb') as f:
        mean, std = pickle.load(f)

    if mean is None or std is None:
        print("Error: Failed to load standardization parameters from file '{}'".format(standardize_params_file_path))
        return False

    mean = mean[0].tolist()
    std = std[0].tolist()
    
    for i in range(len(pe_features)):
        features_buffer.append((pe_features[i] - mean[i]) / std[i])

    print("Successfully extracted features from PE file '{}'".format(pe_file_path))

    return True
