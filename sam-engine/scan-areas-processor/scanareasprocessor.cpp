/**
 *                        بِسْمِ اللَّهِ الرَّحْمَنِ الرَّحِيمِ
 * 
 * scanareasprocessor.cpp - 0.1.0
 * 
 * Copyright (c) 2024-present Scorpion Anti-malware (see AUTHORS.md).
 * 
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 * 
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * 
 */

#include "scanareasprocessor.hpp"

#include <fstream>
#include <iostream>
#include <string>

#include <filesystem>

namespace fs = std::filesystem;

bool ScanAreasProcessor::load_or_init(pathls& scan_areas) {
    bool status {false};

    std::ifstream scan_areas_file(SCAN_AREAS_FILENAME);

    if (!scan_areas_file.is_open()) {
        std::cout << "Info: Creating a new scan areas file" << std::endl;
        std::ofstream scan_areas_output_file(SCAN_AREAS_FILENAME);
        if (!scan_areas_output_file.is_open()) {
            std::cout << "Error: Failed to create scan areas file" << std::endl;
        }
        scan_areas_output_file.close();
        status = true;
        return status;
    }

    std::cout << "Info: Loading scan areas from existing file" << std::endl;
    std::string scan_area;
    while (std::getline(scan_areas_file, scan_area)) {
        if (!fs::is_directory(scan_area)) {
            std::cout << "Error: Scan area " << scan_area << " does not exist" << std::endl;
            continue;
        }

        scan_areas.emplace_back(scan_area);
    }

    scan_areas_file.close();
    
    status = true;
    return status;
}

bool ScanAreasProcessor::add_area(const std::string& area) {
    bool status {false};

    if (!fs::is_directory(area)) {
        std::cout << "Error: Scan area " << area << " does not exist" << std::endl;
        return status;
    }

    std::ofstream scan_areas_file(SCAN_AREAS_FILENAME, std::ios::app);
    if (!scan_areas_file.is_open()) {
        std::cout << "Error: Failed to open scan areas file" << std::endl;
        return status;
    }

    scan_areas_file << area << std::endl;
    scan_areas_file.close();

    status = true;
    return status;
}
