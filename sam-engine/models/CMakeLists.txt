# Caching the library name to be used in the parent scope.
set(SAM_MODELS "sam_models" CACHE STRING "SAM models library name.")

file(GLOB SAM_MODELS_SRC_FILES 
    ${CMAKE_CURRENT_SOURCE_DIR}/staticannpeclassifier.h
    ${CMAKE_CURRENT_SOURCE_DIR}/staticannpeclassifier.cpp
)

add_library(${SAM_MODELS} SHARED  
    ${SAM_MODELS_SRC_FILES} 
)

set_target_properties(${SAM_MODELS} PROPERTIES VERSION ${SAM_PROJECT_VERSION})

target_include_directories(${SAM_MODELS} PUBLIC 
    "${CMAKE_CURRENT_SOURCE_DIR}/" 
)

target_compile_definitions(${SAM_MODELS} PUBLIC 
    STATIC_ANN_ONNX_MODELPATH="${STATIC_ANN_ONNX_MODELPATH}"
    # STATIC_CNN_ONNX_MODELPATH="${STATIC_CNN_ONNX_MODELPATH}"
)

#################################################
#
# ONNXRUNTIME
#
# As onnxruntime does not support find_package(), we will need to link manually.
# See https://github.com/microsoft/onnxruntime/issues/3124#issuecomment-593667957.
#
#################################################

set(ONNXRUNTIME_LIBRARIES 
    "onnxruntime.lib" 
    "onnxruntime_providers_shared.lib" 
)

# The ORT package has a different include directory structure to a local install via cmake.
# We added the path for the pre-built package above. Add the path for a local install to support either usage.
# TODO: If we want to support additional EPs being loadable from a local install we also need to add EP specific
# directories under /include/onnxruntime/core/providers
target_include_directories(${SAM_MODELS} PUBLIC
    "${ONNXRUNTIME_ROOTDIR}/include/"                           # Pre-built package
    "${ONNXRUNTIME_ROOTDIR}/include/onnxruntime/"               # Linux local install to /usr/local
    "${ONNXRUNTIME_ROOTDIR}/include/onnxruntime/core/session/"  # Windows local install
)

target_link_directories(${SAM_MODELS} PUBLIC "${ONNXRUNTIME_ROOTDIR}/lib/")

target_link_libraries(${SAM_MODELS} PUBLIC 
    ${ONNXRUNTIME_LIBRARIES} 
)
