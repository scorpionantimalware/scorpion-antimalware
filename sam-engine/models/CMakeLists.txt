###################################################################################
#                                                                                 #
# sam-engine/models/CMakeLists.txt                                                #
#                                                                                 #
###################################################################################
#                                                                                 #
#    Scorpion Anti-malware is a free Open Source AI-powered Anti-malware          #
#    framework for Researchers.                                                   #
#                                                                                 #
#    Copyright (c) 2024-present  (see AUTHORS.md).                                #
#                                                                                 #
#    This program is free software: you can redistribute it and/or modify         #
#    it under the terms of the GNU General Public License as published by         #
#    the Free Software Foundation, either version 3 of the License, or            #
#    (at your option) any later version.                                          #
#                                                                                 #
#    This program is distributed in the hope that it will be useful,              #
#    but WITHOUT ANY WARRANTY; without even the implied warranty of               #
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                #
#    GNU General Public License for more details.                                 #
#                                                                                 #
#    You should have received a copy of the GNU General Public License            #
#    along with this program.  If not, see <https://www.gnu.org/licenses/>.       #
#                                                                                 #
###################################################################################


# Caching the library name to be used in the parent scope.
set(SAM_MODELS "sam_models" CACHE STRING "SAM models library name.")

file(GLOB SAM_MODELS_HPP_FILES 
    ${CMAKE_CURRENT_SOURCE_DIR}/staticannpeclassifier.hpp
    ${CMAKE_CURRENT_SOURCE_DIR}/staticcnnpeclassifier.hpp
    ${CMAKE_CURRENT_SOURCE_DIR}/dynamiccnnbigru.hpp
)

file(GLOB SAM_MODELS_CPP_FILES 
    ${CMAKE_CURRENT_SOURCE_DIR}/staticannpeclassifier.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/staticcnnpeclassifier.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/dynamiccnnbigru.cpp
)

# Safety check: Ensure that all the files exist.
foreach(file ${SAM_MODELS_CPP_FILES} ${SAM_MODELS_HPP_FILES})
    if(NOT EXISTS "${file}")
        message(FATAL_ERROR "File '${file}' does not exist!")
    endif()
endforeach()

add_library(${SAM_MODELS} SHARED  
    ${SAM_MODELS_CPP_FILES} 
)

set_target_properties(${SAM_MODELS} PROPERTIES VERSION ${SAM_PROJECT_VERSION})

target_include_directories(${SAM_MODELS} PUBLIC 
    "${CMAKE_CURRENT_SOURCE_DIR}" 
)

target_compile_definitions(${SAM_MODELS} PUBLIC 
    SAM_STATIC_ANN_ONNX_MODELPATH="${SAM_STATIC_ANN_ONNX_MODELPATH}"
    SAM_STATIC_CNN_ONNX_MODELPATH="${SAM_STATIC_CNN_ONNX_MODELPATH}"
    SAM_DYNAMIC_CNN_BIGRU_ONNX_MODELPATH="${SAM_DYNAMIC_CNN_BIGRU_ONNX_MODELPATH}"
)

# Install the library.
# This is for CPack to be able to package the library.
install(TARGETS ${SAM_MODELS} RUNTIME DESTINATION .)

#################################################
#
# ONNXRUNTIME
#
# As onnxruntime does not support find_package(), we will need to link manually.
# See https://github.com/microsoft/onnxruntime/issues/3124#issuecomment-593667957.
#
#################################################

# The ONNXRUNTIME version that we are using.
set(ONNXRUNTIME_VERSION "1.17.1")

set(ONNXRUNTIME_LIBRARIES 
    "onnxruntime.lib" 
)

# # Set the URL and the output paths
# set(URL "https://github.com/microsoft/onnxruntime/releases/download/v${ONNXRUNTIME_VERSION}/onnxruntime-win-x64-${ONNXRUNTIME_VERSION}.zip")
# set(DOWNLOAD_DIR "${SAM_ROOTDIR}/externals")
# set(ZIP_FILE "${DOWNLOAD_DIR}/onnxruntime-win-x64-${ONNXRUNTIME_VERSION}.zip")
# set(UNZIP_DIR "${DOWNLOAD_DIR}")
# set(UNZIP_MARKER_FILE "${UNZIP_DIR}/onnxruntime-win-x64-${ONNXRUNTIME_VERSION}")

# # Download the file if it does not already exist
# if(NOT EXISTS ${ZIP_FILE})
#     file(DOWNLOAD ${URL} ${ZIP_FILE}
#         SHOW_PROGRESS
#         STATUS status
#     )

#     # Check if the download was successful
#     list(GET status 0 status_code)
#     list(GET status 1 status_string)

#     if(NOT status_code EQUAL 0)
#         message(FATAL_ERROR "Download ONNXRUNTIME failed: ${status_string}")
#     else()
#         message(STATUS "Download ONNXRUNTIME succeeded: ${status_string}")
#     endif()
# else()
#     message(STATUS "ONNXRUNTIME already exists, skipping download: ${ZIP_FILE}")
# endif()

# # Unzip the file if it has not already been unzipped
# if(NOT EXISTS ${UNZIP_MARKER_FILE})
#     # Use PowerShell to unzip on Windows with ExecutionPolicy Bypass
#     execute_process(
#         COMMAND powershell -ExecutionPolicy Bypass -Command "Expand-Archive -Path ${ZIP_FILE} -DestinationPath ${UNZIP_DIR}"
#         RESULT_VARIABLE unzip_result
#     )

#     # Check if the unzip was successful
#     if(NOT unzip_result EQUAL 0)
#         message(FATAL_ERROR "Unzip failed")
#     else()
#         message(STATUS "Unzip succeeded")
#     endif()
# endif()

# # Add custom command and target to ensure dependencies
# add_custom_target(download_and_unzip ALL
#     DEPENDS ${UNZIP_DIR}
# )

# # Ensure the unzipped directory is created before building
# add_custom_command(
#     OUTPUT ${UNZIP_DIR}
#     COMMAND ${CMAKE_COMMAND} -E make_directory ${UNZIP_DIR}
#     DEPENDS ${ZIP_FILE}
# )

# The ORT package has a different include directory structure to a local install via cmake.
# We added the path for the pre-built package above. Add the path for a local install to support either usage.
# TODO: If we want to support additional EPs being loadable from a local install we also need to add EP specific
# directories under /include/onnxruntime/core/providers
target_include_directories(${SAM_MODELS} PUBLIC
    "${SAM_ONNXRUNTIME_ROOTDIR}/include"                           # Pre-built package
    "${SAM_ONNXRUNTIME_ROOTDIR}/include/onnxruntime"               # Linux local install to /usr/local
    "${SAM_ONNXRUNTIME_ROOTDIR}/include/onnxruntime/core/session"  # Windows local install
)

target_link_directories(${SAM_MODELS} PUBLIC "${SAM_ONNXRUNTIME_ROOTDIR}/lib")

target_link_libraries(${SAM_MODELS} PUBLIC 
    ${ONNXRUNTIME_LIBRARIES} 
)
