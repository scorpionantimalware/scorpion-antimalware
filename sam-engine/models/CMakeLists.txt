###################################################################################
#                                                                                 #
# sam-engine/models/CMakeLists.txt                                                #
#                                                                                 #
###################################################################################
#                                                                                 #
#    Scorpion Anti-malware is a free Open Source AI-powered Anti-malware          #
#    framework for Researchers.                                                   #
#                                                                                 #
#    Copyright (c) 2024-present  (see AUTHORS.md).                                #
#                                                                                 #
#    This program is free software: you can redistribute it and/or modify         #
#    it under the terms of the GNU General Public License as published by         #
#    the Free Software Foundation, either version 3 of the License, or            #
#    (at your option) any later version.                                          #
#                                                                                 #
#    This program is distributed in the hope that it will be useful,              #
#    but WITHOUT ANY WARRANTY; without even the implied warranty of               #
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                #
#    GNU General Public License for more details.                                 #
#                                                                                 #
#    You should have received a copy of the GNU General Public License            #
#    along with this program.  If not, see <https://www.gnu.org/licenses/>.       #
#                                                                                 #
###################################################################################


# Caching the library name to be used in the parent scope.
set(SAM_MODELS "sam_models" CACHE STRING "SAM models library name.")

file(GLOB SAM_MODELS_HPP_FILES 
    ${CMAKE_CURRENT_SOURCE_DIR}/staticannpeclassifier.hpp
    ${CMAKE_CURRENT_SOURCE_DIR}/staticcnnpeclassifier.hpp
    ${CMAKE_CURRENT_SOURCE_DIR}/dynamiccnnbigru.hpp
)

file(GLOB SAM_MODELS_CPP_FILES 
    ${CMAKE_CURRENT_SOURCE_DIR}/staticannpeclassifier.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/staticcnnpeclassifier.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/dynamiccnnbigru.cpp
)

# Safety check: Ensure that all the files exist.
foreach(file ${SAM_MODELS_CPP_FILES} ${SAM_MODELS_HPP_FILES})
    if(NOT EXISTS "${file}")
        message(FATAL_ERROR "File '${file}' does not exist!")
    endif()
endforeach()

add_library(${SAM_MODELS} SHARED  
    ${SAM_MODELS_CPP_FILES} 
)

set_target_properties(${SAM_MODELS} PROPERTIES VERSION ${SAM_PROJECT_VERSION})

target_include_directories(${SAM_MODELS} PUBLIC 
    "${CMAKE_CURRENT_SOURCE_DIR}" 
)

target_compile_definitions(${SAM_MODELS} PUBLIC 
    SAM_STATIC_ANN_ONNX_MODELPATH="${SAM_STATIC_ANN_ONNX_MODELPATH}"
    SAM_STATIC_CNN_ONNX_MODELPATH="${SAM_STATIC_CNN_ONNX_MODELPATH}"
    SAM_DYNAMIC_CNN_BIGRU_ONNX_MODELPATH="${SAM_DYNAMIC_CNN_BIGRU_ONNX_MODELPATH}"
)

# Install the library.
# This is for CPack to be able to package the library.
install(TARGETS ${SAM_MODELS} RUNTIME DESTINATION .)

#################################################
#
# ONNXRUNTIME
#
# As onnxruntime does not support find_package(), we will need to link manually.
# See https://github.com/microsoft/onnxruntime/issues/3124#issuecomment-593667957.
#
#################################################

# The ONNXRUNTIME version that we are using.
set(ONNXRUNTIME_VERSION "1.17.1")

set(ONNXRUNTIME_LIBRARIES 
    "onnxruntime.lib" 
)

# Set default root directory for onnxruntime
if(NOT SAM_ONNXRUNTIME_ROOTDIR)
    if(WIN32)
        set(SAM_ONNXRUNTIME_ROOTDIR "C:/Program Files/onnxruntime")
    else()
        set(SAM_ONNXRUNTIME_ROOTDIR "/usr/local")
    endif()
endif()

# I don't know what is this but I got it from: https://github.com/microsoft/onnxruntime-inference-examples/blob/main/c_cxx/CMakeLists.txt :)
if(SAM_onnxruntime_USE_CUDA)
    add_definitions(-DUSE_CUDA)
endif()

if(SAM_onnxruntime_USE_TENSORRT)
    add_definitions(-DUSE_TENSORRT)
endif()

if(onnxruntime_USE_DML)
    message("Enabling DML")
    add_definitions(-DUSE_DML)
endif()

find_package(onnxruntime)
if (NOT onnxruntime_FOUND)
    set(SAM_ONNXRUNTIME_MAIN_HEADER "${SAM_ONNXRUNTIME_ROOTDIR}/include/onnxruntime_cxx_api.h")

    if (NOT EXISTS "${SAM_ONNXRUNTIME_MAIN_HEADER}")
        # Set the ONNXRUNTIME_URL and the output paths
        set(ONNXRUNTIME_URL "https://github.com/microsoft/onnxruntime/releases/download/v${ONNXRUNTIME_VERSION}/onnxruntime-win-x64-${ONNXRUNTIME_VERSION}.zip")
        set(SAM_EXTERNALS_ROOT_DIR "${SAM_ROOTDIR}/externals")
        set(ONNXRUNTIME_OUTPUT_FILE "${SAM_EXTERNALS_ROOT_DIR}/onnxruntime-win-x64-${ONNXRUNTIME_VERSION}.zip")
        set(ONNXRUNTIME_UNZIPED_ROOT_DIR "${SAM_EXTERNALS_ROOT_DIR}/onnxruntime-win-x64-${ONNXRUNTIME_VERSION}")

        # Download the file if it does not already exist
        if(NOT EXISTS ${ONNXRUNTIME_OUTPUT_FILE})
            message(STATUS "Downloading ${ONNXRUNTIME_URL} to ${ONNXRUNTIME_OUTPUT_FILE}")
            file(DOWNLOAD ${ONNXRUNTIME_URL} ${ONNXRUNTIME_OUTPUT_FILE}
                SHOW_PROGRESS
                STATUS status
            )

            # Check if the download was successful
            list(GET status 0 result_code)
            if (NOT result_code EQUAL 0)
                list(GET status 1 error_message)
                message(FATAL_ERROR "Error downloading file: ${error_message}")
            endif()

            message(STATUS "Download ONNXRUNTIME succeeded.")
        else()
            message(STATUS "ONNXRUNTIME already exists, skipping download: ${ONNXRUNTIME_OUTPUT_FILE}")
        endif()

        # Unzip the file if it has not already been unzipped
        if(NOT EXISTS ${ONNXRUNTIME_UNZIPED_ROOT_DIR})
            if (WIN32)
                # Use PowerShell to unzip on Windows with ExecutionPolicy Bypass
                execute_process(
                    COMMAND powershell -ExecutionPolicy Bypass -Command "Expand-Archive -Path ${ONNXRUNTIME_OUTPUT_FILE} -DestinationPath ${SAM_EXTERNALS_ROOT_DIR}"
                    RESULT_VARIABLE unzip_result
                )

                # Check if the unzip was successful
                if(NOT unzip_result EQUAL 0)
                    message(FATAL_ERROR "Unzip failed")
                endif()
            else()
                # Use unzip on Linux
                execute_process(
                    COMMAND unzip -o ${ONNXRUNTIME_OUTPUT_FILE} -d ${SAM_EXTERNALS_ROOT_DIR}
                    RESULT_VARIABLE unzip_result
                )

                # Check if the unzip was successful
                if(NOT unzip_result EQUAL 0)
                    message(FATAL_ERROR "Unzip failed")
                endif()
            endif()
            message(STATUS "Unzip succeeded")
        else()
            message(STATUS "ONNXRUNTIME already unzipped, skipping unzip: ${ONNXRUNTIME_UNZIPED_ROOT_DIR}")
        endif()

        # Set the SAM_ONNXRUNTIME_ROOTDIR
        set(SAM_ONNXRUNTIME_ROOTDIR "${SAM_EXTERNALS_ROOT_DIR}/onnxruntime-win-x64-${ONNXRUNTIME_VERSION}")
        set(SAM_ONNXRUNTIME_MAIN_HEADER "${SAM_ONNXRUNTIME_ROOTDIR}/include/onnxruntime_cxx_api.h")
    else()
        message(STATUS "Found ONNXRUNTIME: ${SAM_ONNXRUNTIME_MAIN_HEADER}")
    endif()

    # The ORT package has a different include directory structure to a local install via cmake.
    # We added the path for the pre-built package above. Add the path for a local install to support either usage.
    # TODO: If we want to support additional EPs being loadable from a local install we also need to add EP specific
    # directories under /include/onnxruntime/core/providers
    target_include_directories(${SAM_MODELS} PUBLIC
        "${SAM_ONNXRUNTIME_ROOTDIR}/include"                           # Pre-built package
        "${SAM_ONNXRUNTIME_ROOTDIR}/include/onnxruntime"               # Linux local install to /usr/local
        "${SAM_ONNXRUNTIME_ROOTDIR}/include/onnxruntime/core/session"  # Windows local install
    )

    target_link_directories(${SAM_MODELS} PUBLIC "${SAM_ONNXRUNTIME_ROOTDIR}/lib")

    target_link_libraries(${SAM_MODELS} PUBLIC 
        ${ONNXRUNTIME_LIBRARIES} 
    )
endif()

include(${SAM_ROOTDIR}/cmake/Utils.cmake) # For downloading models.

################ Check ANN model ################

# If there is no ANN model file specified, then we can't build the project.
if(NOT SAM_STATIC_ANN_ONNX_MODELPATH)
    set(DESIRED_MODEL_PATH "${SAM_ROOTDIR}/.models/static/ann/ANN-78M-in2381-h11-out1-v0.onnx")
    set(DESIRED_MODEL_GDRIVE_ID "17FbftyZuSLI7Nin3IJAq9U7QV23AUN_3")
    download_model_if_not_exist(${DESIRED_MODEL_GDRIVE_ID} ${DESIRED_MODEL_PATH})
    set(SAM_STATIC_ANN_ONNX_MODELPATH ${DESIRED_MODEL_PATH})
endif()

if (NOT EXISTS ${SAM_STATIC_ANN_ONNX_MODELPATH})
    message(FATAL_ERROR "${SAM_STATIC_ANN_ONNX_MODELPATH} not found.")
else()
    message(STATUS "SAM_STATIC_ANN_ONNX_MODELPATH: ${SAM_STATIC_ANN_ONNX_MODELPATH}")
endif()

# Extract the file extension
get_filename_component(SAM_STATIC_ANN_ONNX_MODELPATH_FILE_EXTENSION "${SAM_STATIC_ANN_ONNX_MODELPATH}" EXT)

# Check if the extension is .onnx (note that the extracted extension includes the dot)
if (NOT SAM_STATIC_ANN_ONNX_MODELPATH_FILE_EXTENSION STREQUAL ".onnx")
    message(FATAL_ERROR "The ANN model must have .onnx file extension.")
endif()

################ Check CNN model ################

# if there is no CNN model file specified, then we can't build the project.
if(NOT SAM_STATIC_CNN_ONNX_MODELPATH)
    set(DESIRED_MODEL_PATH "${SAM_ROOTDIR}/.models/static/cnn/CNN-167M-in1_256_256-out1-v4.onnx")
    set(DESIRED_MODEL_GDRIVE_ID "1-I7BqXz0NiuVyi-B8pr_T3wlfSqrk_gp")
    download_model_if_not_exist(${DESIRED_MODEL_GDRIVE_ID} ${DESIRED_MODEL_PATH})
    set(SAM_STATIC_CNN_ONNX_MODELPATH ${DESIRED_MODEL_PATH})
endif()

if (NOT EXISTS ${SAM_STATIC_CNN_ONNX_MODELPATH})
    message(FATAL_ERROR "${SAM_STATIC_CNN_ONNX_MODELPATH} not found.")
else()
    message(STATUS "SAM_STATIC_CNN_ONNX_MODELPATH: ${SAM_STATIC_CNN_ONNX_MODELPATH}")
endif()

# Extract the file extension
get_filename_component(SAM_STATIC_CNN_ONNX_MODELPATH_FILE_EXTENSION "${SAM_STATIC_CNN_ONNX_MODELPATH}" EXT)

# Check if the extension is .onnx (note that the extracted extension includes the dot)
if (NOT SAM_STATIC_CNN_ONNX_MODELPATH_FILE_EXTENSION STREQUAL ".onnx")
    message(FATAL_ERROR "The CNN model must have .onnx file extension.")
endif()

################ Check BiGRU model ################

# if there is no BiGRU model file specified, then we can't build the project.
if(NOT SAM_DYNAMIC_CNN_BIGRU_ONNX_MODELPATH)
    set(DESIRED_MODEL_PATH "${SAM_ROOTDIR}/.models/dynamic/cnn-bigru/CNN_BIGRU-F32-U32-in120-out1-v2.onnx")
    set(DESIRED_MODEL_GDRIVE_ID "1B9LjPI4cb9iYRuVCvZBpb32DMjaDGuvP")
    download_model_if_not_exist(${DESIRED_MODEL_GDRIVE_ID} ${DESIRED_MODEL_PATH})
    set(SAM_DYNAMIC_CNN_BIGRU_ONNX_MODELPATH ${DESIRED_MODEL_PATH})
endif()

if (NOT EXISTS ${SAM_DYNAMIC_CNN_BIGRU_ONNX_MODELPATH})
    message(FATAL_ERROR "${SAM_DYNAMIC_CNN_BIGRU_ONNX_MODELPATH} not found.")
else()
    message(STATUS "SAM_DYNAMIC_CNN_BIGRU_ONNX_MODELPATH: ${SAM_DYNAMIC_CNN_BIGRU_ONNX_MODELPATH}")
endif()

# Extract the file extension
get_filename_component(SAM_DYNAMIC_CNN_BIGRU_ONNX_MODELPATH_FILE_EXTENSION "${SAM_DYNAMIC_CNN_BIGRU_ONNX_MODELPATH}" EXT)

# Check if the extension is .onnx (note that the extracted extension includes the dot)
if (NOT SAM_DYNAMIC_CNN_BIGRU_ONNX_MODELPATH_FILE_EXTENSION STREQUAL ".onnx")
    message(FATAL_ERROR "The BiGRU model must have .onnx file extension.")
endif()
