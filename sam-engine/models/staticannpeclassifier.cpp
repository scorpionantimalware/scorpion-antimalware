#include "staticannpeclassifier.h"

#include "onnxruntime_cxx_api.h"

#include <filesystem>

namespace fs = std::filesystem;

#include <iostream>

StaticANNPEClassifier::StaticANNPEClassifier() {
    std::string model_path = STATIC_ANN_ONNX_MODELPATH;
    
    std::wstring widestr = std::wstring(model_path.begin(), model_path.end());
    const wchar_t* widecstr = widestr.c_str();

    Ort::Env env;
    Ort::RunOptions run_options;
    Ort::Session session(nullptr);
    
    constexpr int64_t num_input_elements = 2381;

    std::cout << "Loading model from " << model_path << std::endl;

    // Use CPU
    try {
        session = Ort::Session(env, widecstr, Ort::SessionOptions{ nullptr });
    }
    catch (const std::exception& e) {
        std::cerr << "Error: " << e.what() << std::endl;
    }

    // define shape
    const std::array<int64_t, 2> inputShape = { 1, num_input_elements };
    const std::array<int64_t, 1> outputShape = { 1 };
}

StaticANNPEClassifier::~StaticANNPEClassifier() {}
