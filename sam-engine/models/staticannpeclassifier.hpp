/**
 *                        بِسْمِ اللَّهِ الرَّحْمَنِ الرَّحِيمِ
 * 
 * staticannpeclassifier.hpp
 * 
 * Copyright (c) 2024-present Scorpion Anti-malware (see AUTHORS.md).
 * 
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 * 
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * 
 */

#ifndef SAM_STATIC_ANN_PE_CLASSIFIER_HPP
#define SAM_STATIC_ANN_PE_CLASSIFIER_HPP

#ifndef SAM_STATIC_ANN_ONNX_MODELPATH
#error "SAM_STATIC_ANN_ONNX_MODELPATH is not defined"
#endif // SAM_STATIC_ANN_ONNX_MODELPATH

// Check https://github.com/microsoft/onnxruntime/pull/10688.
// Check https://github.com/microsoft/onnxruntime/issues/10564.
// #ifndef ORT_CXX_API_THROW
// #define ORT_CXX_API_THROW
// #endif // ORT_CXX_API_THROW

#include "onnxruntime_cxx_api.h"

#include <string>

constexpr int64_t ANN_NUM_INPUT_ELEMENTS {2381};
constexpr int64_t ANN_NUM_CLASSES {1};

class StaticANNPEClassifier {
 public:
  StaticANNPEClassifier();
  ~StaticANNPEClassifier();

  bool init();

  bool classify(const std::vector<float>& input_features, float& output);

  private:
    Ort::RunOptions* run_options;
    Ort::Env* env;
    Ort::Session* session;
}; // class StaticANNPEClassifier

#endif // SAM_STATIC_ANN_PE_CLASSIFIER_HPP
