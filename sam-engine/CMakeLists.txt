# Caching the library name to be used in the parent scope.
set(SAM_ENGINE "sam_engine" CACHE STRING "SAM Engine library name.")

file(GLOB SAM_ENGINE_HPP_FILES 
    ${CMAKE_CURRENT_SOURCE_DIR}/samengine.hpp 
    ${CMAKE_CURRENT_SOURCE_DIR}/pepathlsmonitor.h 
)

file(GLOB SAM_ENGINE_CPP_FILES 
    ${CMAKE_CURRENT_SOURCE_DIR}/samengine.cpp 
    ${CMAKE_CURRENT_SOURCE_DIR}/pepathlsmonitor.cpp
)

# Safety check: Ensure that all the files exist.
foreach(file ${SAM_ENGINE_CPP_FILES} ${SAM_ENGINE_HPP_FILES})
    if(NOT EXISTS "${file}")
        message(FATAL_ERROR "File '${file}' does not exist!")
    endif()
endforeach()

# Check https://cmake.org/cmake/help/latest/module/FindPython.html for more information.
# TODO: We can use an older version of Python.
# find_package Python has replaced PythonInterp and PythonLibs since cmake 3.12
# Use the following command in the future; now this is only compatible with the latest pybind11.
# find_package(Python ${PY_VERSION} REQUIRED COMPONENTS Interpreter Development)
find_package(PythonInterp ${PY_VERSION} REQUIRED)
if(SAM_BUILD_PYTHON)
    find_package(PythonLibs ${PY_VERSION})
endif()

set(PYBIND11_VERSION 2.2)

# pybind11 is a header only lib
find_package(pybind11 ${PYBIND11_VERSION} CONFIG)
if(NOT pybind11_FOUND)
    set(SAM_PYBIND11_MAIN_HEADER "${SAM_ROOTDIR}/externals/pybind11/include/pybind11/pybind11.h")
    if (NOT EXISTS ${SAM_PYBIND11_MAIN_HEADER})
        message(FATAL_ERROR "Cannot find pybind11 ${PYBIND11_VERSION} package.")
    endif()
    message(STATUS "Found pybind11: ${SAM_PYBIND11_MAIN_HEADER}")
    set(SAM_PYBIND11_ROOTDIR "${SAM_ROOTDIR}/externals/pybind11")
    set(SAM_PYBIND11_BUILD_ROOTDIR "${SAM_ROOTDIR}/.build/.pybind11-build")
    add_subdirectory(${SAM_PYBIND11_ROOTDIR} ${SAM_PYBIND11_BUILD_ROOTDIR})
endif()

add_library(${SAM_ENGINE} SHARED 
    ${SAM_ENGINE_CPP_FILES} 
)

set_target_properties(${SAM_ENGINE} PROPERTIES VERSION ${SAM_PROJECT_VERSION})

set(SAM_BYTE_PIXEL_ENGINE_ROOTDIR "${CMAKE_CURRENT_SOURCE_DIR}/byte-pixel-engine")
set(SAM_MODELS_ROOTDIR "${CMAKE_CURRENT_SOURCE_DIR}/models")
set(SAM_PE_ENGINE_ROOTDIR "${CMAKE_CURRENT_SOURCE_DIR}/PE-engine")
set(SAM_PE_PATHLS_GENERATOR_ROOTDIR "${CMAKE_CURRENT_SOURCE_DIR}/PE-pathls-generator")
set(SAM_SCAN_AREAS_PROCESSOR_ROOTDIR "${CMAKE_CURRENT_SOURCE_DIR}/scan-areas-processor")
set(SAM_DYNAMICS_ENGINE_ROOTDIR "${CMAKE_CURRENT_SOURCE_DIR}/dynamics-engine")

add_subdirectory(${SAM_BYTE_PIXEL_ENGINE_ROOTDIR})
add_subdirectory(${SAM_MODELS_ROOTDIR})
add_subdirectory(${SAM_PE_ENGINE_ROOTDIR})
add_subdirectory(${SAM_PE_PATHLS_GENERATOR_ROOTDIR})
add_subdirectory(${SAM_SCAN_AREAS_PROCESSOR_ROOTDIR})
add_subdirectory(${SAM_DYNAMICS_ENGINE_ROOTDIR})

target_link_libraries(${SAM_ENGINE} PUBLIC 
    ${BYTE_PIXEL_ENGINE} 
    ${SAM_MODELS}
    ${PE_ENGINE} 
    ${PE_PATHLS_GENERATOR} 
    ${SCAN_AREAS_PROCESSOR} 
    ${DYNAMICS_ENGINE} 
)

# When we use any header inside ${SAM_ENGINE}, it must know where these headers are.
# Replace PYTHON_INCLUDE_DIRS with Python_INCLUDE_DIRS in the future.
target_include_directories(${SAM_ENGINE} PUBLIC 
    "${CMAKE_CURRENT_SOURCE_DIR}" 
    "${SAM_BYTE_PIXEL_ENGINE_ROOTDIR}/" 
    "${SAM_MODELS_ROOTDIR}/" 
    "${SAM_PE_ENGINE_ROOTDIR}/" 
    "${SAM_PE_PATHLS_GENERATOR_ROOTDIR}/" 
    "${SAM_SCAN_AREAS_PROCESSOR_ROOTDIR}/" 
    "${SAM_DYNAMICS_ENGINE_ROOTDIR}/"
)

# This is to build with the console with the real engine.
# There is another definition for the dummy engine.
target_compile_definitions(${SAM_ENGINE} PUBLIC 
    SAM_ENGINE_ACTIVE 
)

# Install the library.
# This is for CPack to be able to package the library.
install(TARGETS ${SAM_ENGINE} RUNTIME DESTINATION .)

#################################################
#
# ONNXRUNTIME
#
# As onnxruntime does not support find_package(), we will need to link manually.
# See https://github.com/microsoft/onnxruntime/issues/3124#issuecomment-593667957.
#
#################################################

set(ONNXRUNTIME_LIBRARIES 
    "onnxruntime.lib" 
    "onnxruntime_providers_shared.lib" 
    CACHE STRING "ONNX Runtime library name."
)

# The ORT package has a different include directory structure to a local install via cmake.
# We added the path for the pre-built package above. Add the path for a local install to support either usage.
# TODO: If we want to support additional EPs being loadable from a local install we also need to add EP specific
# directories under /include/onnxruntime/core/providers
target_include_directories(${SAM_ENGINE} PUBLIC
    "${SAM_ONNXRUNTIME_ROOTDIR}/include"                           # Pre-built package
    "${SAM_ONNXRUNTIME_ROOTDIR}/include/onnxruntime"               # Linux local install to /usr/local
    "${SAM_ONNXRUNTIME_ROOTDIR}/include/onnxruntime/core/session"  # Windows local install
)

target_link_directories(${SAM_ENGINE} PUBLIC "${SAM_ONNXRUNTIME_ROOTDIR}/lib")

target_link_libraries(${SAM_ENGINE} PUBLIC 
    ${ONNXRUNTIME_LIBRARIES} 
)

