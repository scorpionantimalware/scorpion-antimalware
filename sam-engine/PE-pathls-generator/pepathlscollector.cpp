/**********************************************************************************/
/*                                                                                */
/* pepathlscollector.cpp                                                          */
/*                                                                                */
/**********************************************************************************/
/*                                                                                */
/*    Scorpion Anti-malware is a free Open Source AI-powered Anti-malware         */
/*    framework for Researchers.                                                  */
/*                                                                                */
/*    Copyright (c) 2024-present  (see AUTHORS.md).                               */
/*                                                                                */
/*    This program is free software: you can redistribute it and/or modify        */
/*    it under the terms of the GNU General Public License as published by        */
/*    the Free Software Foundation, either version 3 of the License, or           */
/*    (at your option) any later version.                                         */
/*                                                                                */
/*    This program is distributed in the hope that it will be useful,             */
/*    but WITHOUT ANY WARRANTY; without even the implied warranty of              */
/*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the               */
/*    GNU General Public License for more details.                                */
/*                                                                                */
/*    You should have received a copy of the GNU General Public License           */
/*    along with this program.  If not, see <https://www.gnu.org/licenses/>.      */
/*                                                                                */
/**********************************************************************************/

#include "pepathlscollector.hpp"

#include <filesystem>

namespace fs = std::filesystem;

#include <iostream>

bool PEPathlsCollector::get_target_pathl_extensions(std::vector<std::string> &target_pathl_extensions_buffer) {
	bool status{ false };
	target_pathl_extensions_buffer.push_back(".exe");
	target_pathl_extensions_buffer.push_back(".dll");
	target_pathl_extensions_buffer.push_back(".lib");
	target_pathl_extensions_buffer.push_back(".msi");
	status = true;
	return status;
}

bool PEPathlsCollector::collect(pathls &pathls_buffer, const std::string &scan_area) {
	bool status{ false };

	if (!fs::exists(scan_area)) {
		std::cout << scan_area << "doesn't exist." << std::endl;
		return status;
	}

	if (!fs::is_directory(scan_area)) {
		std::cout << "Error: Scan area " << scan_area << " is not a directory"
				  << std::endl;
		return status;
	}

	std::vector<std::string> target_pathl_extensions;
	status = PEPathlsCollector::get_target_pathl_extensions(target_pathl_extensions);
	if (!status) {
		return status;
	}

	status = PEPathlsCollector::collect_files(pathls_buffer, scan_area, target_pathl_extensions);
	if (!status) {
		return status;
	}

	return status;
}

bool PEPathlsCollector::collect_files(pathls &pathls_buffer, const std::string &scan_area, const std::vector<std::string> &target_pathl_extensions) {
	bool status{ false };

	fs::directory_iterator itr(scan_area);
	fs::directory_iterator end_itr;

	while (itr != end_itr) {
		const fs::directory_entry &entry{ *itr };

		if (fs::is_directory(entry)) {
			status = PEPathlsCollector::collect_files(pathls_buffer, entry.path().string(), target_pathl_extensions);
			if (!status) {
				return status;
			}
			itr++;
			continue;
		}

		if (!fs::is_regular_file(entry)) {
			itr++;
			continue;
		}

		for (const auto &ext : target_pathl_extensions) {
			if (entry.path().extension() == ext) {
				pathls_buffer.push_back(entry.path().string());
				break;
			}
		}

		// Increment the iterator to move to the next entry
		itr++;
	}

	status = true;

	return status;
}
