/**
 *                        بِسْمِ اللَّهِ الرَّحْمَنِ الرَّحِيمِ
 * 
 * pepathlscollector.cpp
 * 
 * Copyright (c) 2024-present Scorpion Anti-malware (see AUTHORS.md).
 * 
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 * 
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * 
 */

#include "pepathlscollector.hpp"

#include <filesystem>

namespace fs = std::filesystem;

#include <iostream>

bool PEPathlsCollector::get_target_pathl_extensions(std::vector<std::string>& target_pathl_extensions_buffer) {
    bool status {false};
    target_pathl_extensions_buffer.push_back(".exe");
    target_pathl_extensions_buffer.push_back(".dll");
    target_pathl_extensions_buffer.push_back(".lib");
    target_pathl_extensions_buffer.push_back(".msi");
    status = true;
    return status;
}

bool PEPathlsCollector::collect(pathls& pathls_buffer, const std::string& scan_area) {
    bool status {false};

    if (!fs::exists(scan_area)) {
        std::cout << scan_area << "doesn't exist." << std::endl;
        return status;
    }

    if (!fs::is_directory(scan_area)) {
      std::cout << "Error: Scan area " << scan_area << " is not a directory"
                << std::endl;
      return status;
    }

    std::vector<std::string> target_pathl_extensions;
    status = PEPathlsCollector::get_target_pathl_extensions(target_pathl_extensions);
    if (!status) {
        return status;
    }

    status = PEPathlsCollector::collect_files(pathls_buffer, scan_area, target_pathl_extensions);
    if (!status) {
        return status;
    }

    return status;
}


bool PEPathlsCollector::collect_files(pathls& pathls_buffer, const std::string& scan_area, const std::vector<std::string>& target_pathl_extensions) {
    bool status {false};

    fs::directory_iterator itr(scan_area);
    fs::directory_iterator end_itr;

    while (itr != end_itr) {
        const fs::directory_entry& entry {*itr};

        if (fs::is_directory(entry)) {
            status = PEPathlsCollector::collect_files(pathls_buffer, entry.path().string(), target_pathl_extensions);
            if (!status) {
                return status;
            }
            itr++;
            continue;
        }

        if (!fs::is_regular_file(entry)) {
            itr++;
            continue;
        }

        for (const auto& ext : target_pathl_extensions) {
            if (entry.path().extension() == ext) {
                pathls_buffer.push_back(entry.path().string());
                break;
            }
        }

        // Increment the iterator to move to the next entry
        itr++;
    }

    status = true;

    return status;
}
