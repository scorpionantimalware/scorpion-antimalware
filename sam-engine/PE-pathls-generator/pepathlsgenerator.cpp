#include "pepathlsgenerator.hpp"

#include "pepathlscollector.hpp"

#include <fstream>
#include <iostream>

#include <filesystem>

namespace fs = std::filesystem;

PEPathlsGenerator::~PEPathlsGenerator() {
    PEPathlsGenerator::clean();
}

bool PEPathlsGenerator::clean() {
    bool status {false};

    status = fs::exists(PE_PATHLS_FILENAME);

    if (!status) {
        return status;
    }

    status = fs::remove(PE_PATHLS_FILENAME);

    if (!status) {
        std::cerr << "Error: Unable to delete file " << PE_PATHLS_FILENAME << std::endl;
        return status;
    }

    status = true;
    return status;
}

bool PEPathlsGenerator::generate(const std::string& scan_area) {
    bool status {false};
    PEPathlsCollector collector;
    pathls pathls_buffer;
    status = collector.collect(pathls_buffer, scan_area);
    if (!status) {
        return status;
    }

    const std::string pe_pathls_file {PE_PATHLS_FILENAME};

    std::ofstream outfile(pe_pathls_file, std::ios_base::app); // Append mode.
    if (!outfile.is_open()) {
        std::cout << "Error: Unable to open file: " << pe_pathls_file << std::endl;
        return status;
    }

    for (const auto& path : pathls_buffer) {
        outfile << path << "\n";
    }

    outfile.close();

    status = true;

    return status;
}
