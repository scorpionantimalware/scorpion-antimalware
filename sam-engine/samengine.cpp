#include "samengine.h"

#include "samparser.h"
#include "peengine.h"
#include "bytepixelengine.h"

#include <iostream>

SAMEngine::SAMEngine() : engine_thread(nullptr), mtx(nullptr) {
  Py_Initialize(); 
}

SAMEngine::~SAMEngine() {
  if (SAMEngine::mtx != nullptr) {
    delete SAMEngine::mtx;
  }

  if (SAMEngine::engine_thread != nullptr) {
    if (SAMEngine::engine_thread->joinable()) {
      SAMEngine::engine_thread->join();
    }
    delete SAMEngine::engine_thread;
  }

  // This is a no-op when called for a second time (without calling Py_Initialize() again first). 
  // Normally the return value is 0. If there were errors during finalization (flushing buffered data), -1 is returned.
  if (Py_FinalizeEx() < 0) {
      std::cerr << "Error: Failed to finalize Python interpreter" << std::endl;
      PyErr_Print();
  }
}

bool SAMEngine::scan() {
  const std::string pe_file_path {"C:/"};

  bool result {false};

  if (SAMEngine::engine_thread != nullptr) {
    if (SAMEngine::engine_thread->joinable()) {
      return result;
    }
    delete SAMEngine::engine_thread;
  }

  SAMEngine::engine_thread = new std::thread(&SAMEngine::fire_scan, this, pe_file_path);
  return result;
}

bool SAMEngine::fire_scan(const std::string& pe_file_path) {
  bool result {false};
  return result;
}
