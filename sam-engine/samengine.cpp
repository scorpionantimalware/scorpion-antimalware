/**********************************************************************************/
/*                                                                                */
/* samengine.cpp                                                                  */
/*                                                                                */
/**********************************************************************************/
/*                                                                                */
/*    Scorpion Anti-malware is a free Open Source AI-powered Anti-malware         */
/*    framework for Researchers.                                                  */
/*                                                                                */
/*    Copyright (c) 2024-present  (see AUTHORS.md).                               */
/*                                                                                */
/*    This program is free software: you can redistribute it and/or modify        */
/*    it under the terms of the GNU General Public License as published by        */
/*    the Free Software Foundation, either version 3 of the License, or           */
/*    (at your option) any later version.                                         */
/*                                                                                */
/*    This program is distributed in the hope that it will be useful,             */
/*    but WITHOUT ANY WARRANTY; without even the implied warranty of              */
/*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the               */
/*    GNU General Public License for more details.                                */
/*                                                                                */
/*    You should have received a copy of the GNU General Public License           */
/*    along with this program.  If not, see <https://www.gnu.org/licenses/>.      */
/*                                                                                */
/**********************************************************************************/

#include "samengine.hpp"

#include <fstream>

#include <iostream>

#define SAM_ENGINE_MAX_JOBS 10

namespace sam_engine {
  AddNewFileCallback_t add_new_file_callback {nullptr};
  UpdateNewFileCallback_t update_new_file_callback {nullptr};
  ScannerStateChangeCallback_t scanner_state_change_callback {nullptr};
  UpdateEngineStatusCallback_t update_engine_status_callback {nullptr};

  SAMEngine::SAMEngine() : 
#ifdef SAM_ENGINE_ENABLE_UI_THREAD
  engine_thread(nullptr), 
#endif // SAM_ENGINE_ENABLE_UI_THREAD
                            engine_termination_requested(false), 
                            scanner(nullptr), 
                            fim(nullptr),
                            start_scan_requested(false) {} // constructor SAMEngine

  SAMEngine::~SAMEngine() {
    if (SAMEngine::fim) {
      delete SAMEngine::fim;
      SAMEngine::fim = nullptr;
    }

    if (SAMEngine::scanner) {
      delete SAMEngine::scanner;
      SAMEngine::scanner = nullptr;
    }

    SAMEngine::clean_thread();
  } // destructor SAMEngine

  void SAMEngine::engine_main() {
#ifdef SAM_ENGINE_ENABLE_UI_THREAD
    if (SAMEngine::engine_thread) {
      std::cout << "Error: Engine thread already exists" << std::endl;
      return;
    }

    std::cout << "Info: Engine is starting in a separate thread" << std::endl;
    SAMEngine::engine_thread = new std::thread(&SAMEngine::run, this); 

    /*
      Detach the thread so that it can run independently of the main thread.

      Here in each scan, we will create a new thread so we do not need the current one.
    */
    // SAMEngine::engine_thread->detach();
#else
    std::cout << "Info: Engine is starting in the main (UI) thread" << std::endl;
    SAMEngine::run();
#endif // SAM_ENGINE_ENABLE_UI_THREAD
  } // function engine_main

  void SAMEngine::fulfill_engine_termination_request() {
    {
      std::lock_guard<std::mutex> lock(SAMEngine::mtx);
      SAMEngine::engine_termination_requested = true;
    }
    SAMEngine::cv.notify_one(); // Notify the engine thread.
  } // function fulfill_engine_termination_request

  void SAMEngine::fulfill_start_scan_request() {
    {
      std::lock_guard<std::mutex> lock(SAMEngine::mtx);
      SAMEngine::start_scan_requested = true;
    }
    SAMEngine::cv.notify_one(); // Notify the engine thread.
  } // function fulfill_start_scan_request

  void SAMEngine::fulfill_start_fim_request() {
    {
      std::lock_guard<std::mutex> lock(SAMEngine::mtx);
      SAMEngine::start_fim_requested = true;
    }
    SAMEngine::cv.notify_one(); // Notify the engine thread.
  } // function fulfill_start_fim_request

  void SAMEngine::run() {

    std::cout << "Info: Engine made it" << std::endl;

    ////////////////////////////////////////////////////
    // 
    // Main engine loop
    //
    ////////////////////////////////////////////////////
    while (true) {
      std::unique_lock<std::mutex> lock(SAMEngine::mtx);

      cv.wait(lock, [&] { 
        return SAMEngine::engine_termination_requested || 
                SAMEngine::start_scan_requested ||
                SAMEngine::start_fim_requested;
      });

      if (SAMEngine::engine_termination_requested) {
        break;
      }

      std::cout << "Info: Engine is running" << std::endl;

      if (SAMEngine::start_scan_requested) {
        SAMEngine::start_scan_requested = false;

        if (!SAMEngine::scanner) {
          SAMEngine::scanner = new SAMScanner();
        }

        // Only scan if the scanner is idle.
        if (SAMEngine::scanner->get_state() == SAMScanner::State::IDLE) {
          SAMEngine::scanner->scan();
        }
      }

      if (SAMEngine::start_fim_requested) {
        SAMEngine::start_fim_requested = false;

        if (!SAMEngine::fim) {
          SAMEngine::fim = new SAMFileIntegrityManager();
        }

        // Only start the FIM if it is not running.
        if (SAMEngine::fim->get_state() == SAMFileIntegrityManager::State::SCANNING) {
          SAMEngine::fim->start();
        }
      }
    } // while (true)

    std::cout << "Info: Engine is stopped" << std::endl;
  } // function run

  void SAMEngine::clean_thread() {
#ifdef SAM_ENGINE_ENABLE_UI_THREAD
    if (SAMEngine::engine_thread) {
      // Since the engine thread is detached, we can't join it (Detaching disabled)
      if (SAMEngine::engine_thread->joinable()) {
        SAMEngine::engine_thread->join();
      }
      delete SAMEngine::engine_thread;
      SAMEngine::engine_thread = nullptr;
    }
#endif // SAM_ENGINE_ENABLE_UI_THREAD
  } // function clean_thread

  SAMScanner::SAMScanner() : scanner_thread(nullptr), 
                              analyzer(nullptr),
                              current_state(SAMScanner::State::IDLE) {
    SAMScanner::analyzer = new ScanAnalyzer();
  } // constructor SAMScanner

  SAMScanner::~SAMScanner() {
    if (SAMScanner::analyzer) {
      delete SAMScanner::analyzer;
      SAMScanner::analyzer = nullptr;
    }

    SAMScanner::clean_thread();
  } // destructor SAMScanner

  void SAMScanner::scan() {
    // Set the current state to SCANNING.
    SAMScanner::switch_state(SAMScanner::State::SCANNING);

    if (update_engine_status_callback) {
      std::lock_guard<std::mutex> update_engine_status_callback_lock(SAMScanner::update_engine_status_callback_mtx);
      update_engine_status_callback("Scanning started",
                                    SAMEngine::StatusMessageType::INFO);
    }

    // Clean the thread before starting a new one.
    SAMScanner::clean_thread();

    SAMScanner::scanner_thread = new std::thread(&SAMScanner::run, this);

    /*
      Detach the thread so that it can run independently of the engine thread.

      Here in each scan, we will create a new thread so we do not need the current one.
    */
    // SAMScanner::scanner_thread->detach();
  }

  void SAMScanner::run() {
    bool status {false};

    ScanAreasProcessor scan_areas_processor;
    std::vector<std::string> scan_areas;
    status = scan_areas_processor.load_or_init(scan_areas);
    if (!status) {
      std::cout << "Error: Failed to load or initialize scan areas"
                << std::endl;

      if (update_engine_status_callback) {
        std::lock_guard<std::mutex> update_engine_status_callback_lock(SAMScanner::update_engine_status_callback_mtx);
        update_engine_status_callback("Failed to load or initialize scan areas",
                                      SAMEngine::StatusMessageType::ERROR);
      }
      
      // Set the current state to IDLE.
      SAMScanner::switch_state(SAMScanner::State::IDLE);
      return;
    }

    if (scan_areas.empty()) {
      std::cout << "Info: No scan areas found" << std::endl;

      if (update_engine_status_callback) {
        std::lock_guard<std::mutex> update_engine_status_callback_lock(SAMScanner::update_engine_status_callback_mtx);
        update_engine_status_callback("No scan areas found",
                                      SAMEngine::StatusMessageType::INFO);
      }
      
      // Set the current state to IDLE.
      SAMScanner::switch_state(SAMScanner::State::IDLE);
      return;
    }

    PEPathlsGenerator generator;

    // Generate the .pathl file.
    size_t i {0};
    while (i < scan_areas.size()) {

      // Generate paths for each scan area.
      status = generator.generate(scan_areas.at(i));
      if (!status) {
        std::cout << "Error: Failed to generate .pathl file" << std::endl;

        if (update_engine_status_callback) {
          std::lock_guard<std::mutex> update_engine_status_callback_lock(SAMScanner::update_engine_status_callback_mtx);
          update_engine_status_callback("Failed to generate .pathl file",
                                        SAMEngine::StatusMessageType::ERROR);
        }
        
        // Set the current state to IDLE.
        SAMScanner::switch_state(SAMScanner::State::IDLE);
        return;
      }

      // Next scan area.
      i++;
    }

    // Now the generator is released.
    std::cout << "Info: .pathl file generated" << std::endl;

    if (update_engine_status_callback) {
      std::lock_guard<std::mutex> update_engine_status_callback_lock(SAMScanner::update_engine_status_callback_mtx);
      update_engine_status_callback(".pathl file generated",
                                    SAMEngine::StatusMessageType::INFO);
    }

    // Collect the paths from the .pathl file.
    // TODO: Don't open the full file at once. Load a batch and close the file.
    std::ifstream pe_pathls_file(PE_PATHLS_FILENAME);
    if (!pe_pathls_file.is_open()) {
      std::cout << "Error: Failed to open .pathl file" << std::endl;

      if (update_engine_status_callback) {
        std::lock_guard<std::mutex> update_engine_status_callback_lock(SAMScanner::update_engine_status_callback_mtx);
        update_engine_status_callback("Failed to open .pathl file",
                                      SAMEngine::StatusMessageType::ERROR);
      }
      
      // Set the current state to IDLE.
      SAMScanner::switch_state(SAMScanner::State::IDLE);
      return;
    }

    // We must initialize the Python interpreter inside the thread that will use it.
    // See https://stackoverflow.com/a/61283805 for more information.
    status = Py_IsInitialized();
    if (!status) {
      Py_Initialize(); // If the Python interpreter is not initialized, initialize it.
      if (!Py_IsInitialized()) {
        std::cout << "Error: Failed to initialize Python interpreter"
                  << std::endl;

        // Set the current state to IDLE.
        SAMScanner::switch_state(SAMScanner::State::IDLE);
        PyErr_Print();
        return;
      }
    }

    // Start the PE engine.
    /*
        This must be pointer because we need more control 
        over the object's lifetime.
    */
    PEEngine* pe_engine = new PEEngine();
    status = pe_engine->init();

    if (!status) {
      std::cout << "Error: Failed to initialize PE engine" << std::endl;
      
      // Set the current state to IDLE.
      SAMScanner::switch_state(SAMScanner::State::IDLE);
      return;
    }

    /*
        This must be pointer because we need more control 
        over the object's lifetime.
    */
    BytePixelEngine* bp_engine = new BytePixelEngine();
    status = bp_engine->init();

    if (!status) {
      std::cout << "Error: Failed to initialize BytePixel Engine" << std::endl;
      
      // Set the current state to IDLE.
      SAMScanner::switch_state(SAMScanner::State::IDLE);
      return;
    }

    // Start the StaticANNPEClassifier.
    StaticANNPEClassifier static_ann_pe_classifier;
    status = static_ann_pe_classifier.init();

    if (!status) {
      std::cout << "Error: Failed to initialize StaticANNPEClassifier" << std::endl;
      
      // Set the current state to IDLE.
      SAMScanner::switch_state(SAMScanner::State::IDLE);
      return;
    }

  // Start the StaticCNNPEClassifier.
    StaticCNNPEClassifier static_cnn_pe_classifier;
    status = static_cnn_pe_classifier.init();

    if (!status) {
      std::cout << "Error: Failed to initialize StaticCNNPEClassifier" << std::endl;
      
      // Set the current state to IDLE.
      SAMScanner::switch_state(SAMScanner::State::IDLE);
      return;
    }

    /**
    * Now we need to release the GIL to enable the consumers to use the Python interpreter. We
    * Can't use the Python interpreter here again until acquiring the GIL again.
    * 
    * @note Check https://stackoverflow.com/a/29725222.
    * 
    * @note Check https://docs.python.org/3/c-api/init.html#releasing-the-gil-from-extension-code.
    * 
    * @note You can use the following MACRO @c Py_BEGIN_ALLOW_THREADS
    * 
    */
   PyThreadState *_save;
    _save = PyEval_SaveThread();

    PEPathlsMonitor monitor;
    
    // Create our scanning workers
    std::vector<std::thread> scanning_workers;
    for (size_t j {0}; j < SAM_ENGINE_MAX_JOBS; j++) {
      scanning_workers.emplace_back(&SAMScanner::work, this, j,
        std::ref(monitor),
        std::ref(*pe_engine),
        std::ref(*bp_engine),
        std::ref(static_ann_pe_classifier),
        std::ref(static_cnn_pe_classifier));
    }

    std::string pe_pathl_buffer;
    while (std::getline(pe_pathls_file, pe_pathl_buffer)) {
      monitor.add_pe_pathl(pe_pathl_buffer);
    }

    pe_pathls_file.close();

    // Notify workers that no more files will be added
    monitor.set_done();

    for (auto& worker : scanning_workers) {
      if (worker.joinable()) {
        worker.join();
      }
    }

    /**
      * Now we need to acquire the GIL again to enable this engine thread to use the
      * interpreter.
      *
      * @note You can use the following MACRO @c Py_END_ALLOW_THREADS
      *
      * @note The interpreter is used again inside destructors of pe_engine and 
      *       bp_engine.
      *
      */
    PyEval_RestoreThread(_save);

    // Delete the objects after acquiring the GIL.
    if (pe_engine) {
      delete pe_engine;
      pe_engine = nullptr;
    }
    if (bp_engine) {
      delete bp_engine;
      bp_engine = nullptr;
    }

    // Release the Python interpreter.
    // This is a no-op when called for a second time (without calling
    // Py_Initialize() again first). Normally the return value is 0. If there
    // were errors during finalization (flushing buffered data), -1 is returned.
    if (Py_FinalizeEx() < 0) {
      std::cout << "Error: Failed to finalize Python interpreter" << std::endl;
      PyErr_Print();
    }

    // Set the current state to IDLE.
    SAMScanner::switch_state(SAMScanner::State::IDLE);

    if (update_engine_status_callback) {
      std::lock_guard<std::mutex> update_engine_status_callback_lock(SAMScanner::update_engine_status_callback_mtx);
      update_engine_status_callback("Scanning completed",
                                    SAMEngine::StatusMessageType::INFO);
    }
  }

  void SAMScanner::stop() {

  }

  void SAMScanner::pause() {

  }

  void SAMScanner::resume() {
    
  }

  void SAMScanner::clean_thread() {
    if (SAMScanner::scanner_thread) {
      // Since the scanner thread is detached, we can't join it (Detaching disabled)
      if (SAMScanner::scanner_thread->joinable()) {
        SAMScanner::scanner_thread->join();
      }
      delete SAMScanner::scanner_thread;
      SAMScanner::scanner_thread = nullptr;
    }
  }

  SAMScanner::State SAMScanner::get_state() const {
    return SAMScanner::current_state;
  }

  void SAMScanner::switch_state(const SAMScanner::State& new_state) {
    SAMScanner::current_state = new_state;
    // TODO: Fix this.
    // if (scanner_state_change_callback) {
    //   scanner_state_change_callback(SAMScanner::current_state);
    // }
  }

  void SAMScanner::work([[maybe_unused]] size_t id,
                        PEPathlsMonitor &monitor,
                        PEEngine &pe_engine,
                        BytePixelEngine &bp_engine,
                        StaticANNPEClassifier &ann_classifier,
                        StaticCNNPEClassifier &cnn_classifier) {
    std::string pathl_buffer;
    while (monitor.get_pe_pathl(pathl_buffer)) {
      std::cout << "Info: Scanning " << pathl_buffer << std::endl;

      bool status {false};

      /*
        This ID is used to get the file entry from the table inside the GUI.
      */
      int new_file_id {-1};
      if (add_new_file_callback) {
        // The status callback modifies the GUI so we want to make sure that
        // only one thread does it at a time.
        std::lock_guard<std::mutex> add_new_file_callback_lock(SAMScanner::add_new_file_callback_mtx);
        new_file_id = add_new_file_callback();
      }

      if (new_file_id == -1) {
        std::cout << "Error: Failed to get the new file ID" << std::endl;

        if (update_engine_status_callback) {
            std::lock_guard<std::mutex> update_engine_status_callback_lock(SAMScanner::update_engine_status_callback_mtx);
            update_engine_status_callback("Failed to get the new file ID",
                SAMEngine::StatusMessageType::ERROR);
        }

        continue;
      }

      if (update_new_file_callback) {
        // The status callback modifies the GUI so we want to make sure that 
        // only one thread does it at a time.
        // TODO: Do we need to lock the mutex here?
        // std::lock_guard<std::mutex> set_file_status_callback_lock(SAMScanner::set_file_status_callback_mtx);
        update_new_file_callback(new_file_id, 0, pathl_buffer, -1.0f); // 0 is the column index for the filename
        update_new_file_callback(new_file_id, 1, "Scanning", -1.0f); // 1 is the column index for the status
      }

      // Acquire the GIL before making Python C API calls.
      // See
      // https://docs.python.org/3/c-api/init.html#non-python-created-threads
      // for more information.
      // 
      // This is similar to a mutex, however, this is specific to the interpreter to protect it as it is not thread-safe.
      PyGILState_STATE gstate;
      gstate = PyGILState_Ensure();

      // Get the PE features of the file.
      std::vector<float> pe_features;

      // TODO: Exception thrown at 0x00007FFC039CAB89 in scorpion-antimalware.exe: Microsoft C++ exception: nanobind::builtin_exception at memory location 0x000000996C1FEAF0.
      status = pe_engine.get_pe_features(pathl_buffer, pe_features);

      if (!status) {
        std::cout << "Error: Failed to get PE features of " << pathl_buffer << std::endl;
        continue;
      }

      std::vector<float> bp_features;

      status = bp_engine.get_byte_pixel_features(pathl_buffer, bp_features);

      if (!status) {
        std::cout << "Error: Failed to get Pixel features of " << pathl_buffer << std::endl;
        continue;
      }

      /* Release the thread. No Python API allowed beyond this point. */
      PyGILState_Release(gstate);

      // Classify the PE file.
      float annoutput {-1.0f};
      
      status = ann_classifier.classify(pe_features, annoutput);

      if (!status || annoutput == -1.0f) {
        std::cout << "Error: ANN failed to classify " << pathl_buffer << std::endl;
        continue;
      }

      // Classify the PE file for CNN.
      float cnnoutput {-1.0f};

      status = cnn_classifier.classify(bp_features, cnnoutput);

      if (!status || cnnoutput == -1.0f) {
        std::cout << "Error: CNN failed to classify " << pathl_buffer << std::endl;
        continue;
      }

      std::cout << "ANN-Info: " << pathl_buffer << " is classified as " << ((annoutput < 0.5f) ? "Bengin" : "Malware") << " with confidence " << annoutput << std::endl;
      std::cout << "CNN-Info: " << pathl_buffer << " is classified as " << ((cnnoutput < 0.5f) ? "Bengin" : "Malware") << " with confidence " << cnnoutput << std::endl;

      /*
        This is the static voting mechanism.

        TODO: Implement a more robust voting mechanism.
      */
      float prediction {(annoutput + cnnoutput) * 0.5f};

      std::string prediction_status {"Failed"};

      if (prediction == -1.0f || prediction < 0.0f || prediction > 1.0f) {
        if (update_new_file_callback) {
          // The status callback modifies the GUI so we want to make sure that 
          // only one thread does it at a time.
          // TODO: Do we need to lock the mutex here?
          // std::lock_guard<std::mutex> set_file_status_callback_lock(SAMScanner::set_file_status_callback_mtx);
          update_new_file_callback(new_file_id, 1, prediction_status, -1.0f); // 1 is the column index for the status
        }
        continue;
      }

      if (prediction > 0.5f) {
        prediction_status = "Malware";

        if (update_engine_status_callback) {
          std::lock_guard<std::mutex> update_engine_status_callback_lock(SAMScanner::update_engine_status_callback_mtx);
          update_engine_status_callback(pathl_buffer + " is malware",
                                        SAMEngine::StatusMessageType::WARNING);
        }

      } else {
        prediction_status = "Benign";
      }

      if (update_new_file_callback) {
        // The status callback modifies the GUI so we want to make sure that 
        // only one thread does it at a time.
        // TODO: Do we need to lock the mutex here?
        // std::lock_guard<std::mutex> set_file_status_callback_lock(SAMScanner::set_file_status_callback_mtx);
        update_new_file_callback(new_file_id, 1, prediction_status, prediction); // 1 is the column index for the status
      }
    } // while (!SAMScanner::termination_requested && monitor.get_pe_pathl(pathl_buffer))
  } // function work

  SAMFileIntegrityManager::SAMFileIntegrityManager() : manager_thread(nullptr) {} // constructor SAMFileIntegrityManager

  SAMFileIntegrityManager::~SAMFileIntegrityManager() {
    SAMFileIntegrityManager::clean_thread();
  } // destructor SAMFileIntegrityManager

  void SAMFileIntegrityManager::start() {
    SAMFileIntegrityManager::switch_state(SAMFileIntegrityManager::State::SCANNING);

    // Clean the thread before starting a new one.
    SAMFileIntegrityManager::clean_thread();

    SAMFileIntegrityManager::manager_thread = new std::thread(&SAMFileIntegrityManager::run, this);

    /*
      Detach the thread so that it can run independently of the engine thread.

      Here in each scan, we will create a new thread so we do not need the current one.
    */
    // SAMFileIntegrityManager::manager_thread->detach();
  }

  void SAMFileIntegrityManager::stop() {

  }

  void SAMFileIntegrityManager::clean_thread() {
    if (SAMFileIntegrityManager::manager_thread) {
      // Since the scanner thread is detached, we can't join it (Detaching disabled)
      if (SAMFileIntegrityManager::manager_thread->joinable()) {
        SAMFileIntegrityManager::manager_thread->join();
      }
      delete SAMFileIntegrityManager::manager_thread;
      SAMFileIntegrityManager::manager_thread = nullptr;
    }
  }

  SAMFileIntegrityManager::State SAMFileIntegrityManager::get_state() const {
    return SAMFileIntegrityManager::current_state;
  }

  void SAMFileIntegrityManager::switch_state(const SAMFileIntegrityManager::State& new_state) {
    SAMFileIntegrityManager::current_state = new_state;
  }

  void SAMFileIntegrityManager::run() {
    std::cout << "Info: File Integrity Manager is running" << std::endl;

    bool status {false};

    status = Py_IsInitialized();
    if (!status) {
      Py_Initialize(); // If the Python interpreter is not initialized, initialize it.
      if (!Py_IsInitialized()) {
        std::cout << "Error: Failed to initialize Python interpreter"
                  << std::endl;
        PyErr_Print();
        return;
      }
    }

    FileIntegrityManagement fim;
    status = fim.init();

    if (!status) {
      std::cout << "Error: Failed to initialize File Integrity Management" << std::endl;
      return;
    }

    std::vector<std::string> dirs_buffer;
    std::vector<std::string> freq_buffer;
    std::vector<std::string> attributes_buffer;

    status = fim.read_config_file(dirs_buffer, freq_buffer, attributes_buffer);

    if (!status) {
      std::cout << "Error: Failed to read the configuration file" << std::endl;
      return;
    }

   PyThreadState *_save;
    _save = PyEval_SaveThread();
    
    // Create our scanning workers
    // Each worker will scan a directory.
    std::vector<std::thread> scanning_workers;
    for (size_t i {0}; i < dirs_buffer.size(); i++) {
      scanning_workers.emplace_back(&SAMFileIntegrityManager::work, this, i,
        std::ref(fim),
        std::ref(dirs_buffer.at(i)),
        std::ref(freq_buffer),
        std::ref(attributes_buffer));
    }

    for (auto& worker : scanning_workers) {
      if (worker.joinable()) {
        worker.join();
      }
    }

    PyEval_RestoreThread(_save);

    std::cout << "Info: File Integrity Manager is stopped" << std::endl;
    SAMFileIntegrityManager::switch_state(SAMFileIntegrityManager::State::IDLE);
  } // function run

  void SAMFileIntegrityManager::work([[maybe_unused]] size_t id,
                                    FileIntegrityManagement& fim,
                                    const std::string& scan_dir,
                                    const std::vector<std::string>& freq,
                                    const std::vector<std::string>& attributes) {
    std::cout << "Info: Scanning " << scan_dir << std::endl;

    bool status {false};

    while (true) {
      PyGILState_STATE gstate;
      gstate = PyGILState_Ensure();

      status = fim.integrity(scan_dir, freq, attributes);

      PyGILState_Release(gstate);

      if (!status) {
        std::cout << "Error: Failed to scan " << scan_dir << std::endl;
        break;
      }

      std::this_thread::sleep_for(std::chrono::seconds(5));
    } // while (true)
  } // function work

  void hook_add_new_file_callback(const AddNewFileCallback_t& callback) {
    add_new_file_callback = callback;
  } // function hook_new_file_callback

  void hook_update_new_file_callback(const UpdateNewFileCallback_t& callback) {
    update_new_file_callback = callback;
  } // function hook_update_new_file_callback

  void hook_scanner_state_change_callback(const ScannerStateChangeCallback_t& callback) {
    scanner_state_change_callback = callback;
  } // function hook_scanner_state_change_callback

  void hook_update_engine_status_callback(const UpdateEngineStatusCallback_t& callback) {
    update_engine_status_callback = callback;
  } // function hook_update_engine_status_callback
} // namespace sam_engine
