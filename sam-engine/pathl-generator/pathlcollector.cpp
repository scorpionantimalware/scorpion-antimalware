#include "pathlcollector.h"

#include <filesystem>

namespace fs = std::filesystem;

#include <iostream>

bool PathlCollector::get_target_pathl_extensions(std::vector<std::string>& target_pathl_extensions_buffer) {
    bool status {false};
    target_pathl_extensions_buffer.push_back(".exe");
    target_pathl_extensions_buffer.push_back(".dll");
    target_pathl_extensions_buffer.push_back(".lib");
    target_pathl_extensions_buffer.push_back(".msi");
    status = true;
    return status;
}

bool PathlCollector::collect(pathls& pathls_buffer, const std::string& scan_area) {
    bool status {false};

    if (!fs::exists(scan_area)) {
        return status;
    }

    std::vector<std::string> target_pathl_extensions;
    status = PathlCollector::get_target_pathl_extensions(target_pathl_extensions);
    if (!status) {
        return status;
    }

    status = PathlCollector::collect_files(pathls_buffer, scan_area, target_pathl_extensions);
    if (!status) {
        return status;
    }

    return status;
}


bool PathlCollector::collect_files(pathls& pathls_buffer, const std::string& scan_area, const std::vector<std::string>& target_pathl_extensions) {
    bool status {false};

    fs::directory_iterator itr(scan_area);
    fs::directory_iterator end_itr;

    while (itr != end_itr) {
        const fs::directory_entry& entry = *itr;

        if (fs::is_directory(entry)) {
            status = PathlCollector::collect_files(pathls_buffer, entry.path().string(), target_pathl_extensions);
            if (!status) {
                return status;
            }
            itr++;
            continue;
        }

        if (!fs::is_regular_file(entry)) {
            itr++;
            continue;
        }

        for (const auto& ext : target_pathl_extensions) {
            if (entry.path().extension() == ext) {
                pathls_buffer.push_back(entry.path().string());
                break;
            }
        }

        // Increment the iterator to move to the next entry
        itr++;
    }

    status = true;

    return status;
}
