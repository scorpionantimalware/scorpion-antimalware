#!/usr/bin/env python3

import requests
import sys
import argparse
import json
import pyzipper

from jq import jq

def check_sha256(s):
        if s == "":
            return
        if len(s) != 64:
            raise argparse.ArgumentTypeError("Please use sha256 value instead of '" + s + "'")
        return str(s)
#check if the hashes is already in the file
def is_string_in_file(file_path, hashes_to_add):
    new_hashes_list = []
    with open(file_path, 'r') as file:
        file_content = file.read()
    for line in hashes_to_add:
            if line in file_content :
                print("hash " + line.strip() + " already in the file.")
            else:
                new_hashes_list.append(line.strip())
    
    return new_hashes_list    
def append_hash_to_file(file_path, hash_to_add):
    try:
        with open(file_path, 'a+') as file:
            if file.tell() > 0 and not file.read().endswith('\n'):
            # Add a newline before appending the new content
                file.write('\n')
            file.write(hash_to_add)
        print("hash " + hash_to_add + " is add to the file.")
    except FileNotFoundError:
        print("File not found. Please provide a valid file path.")

parser = argparse.ArgumentParser(description='Download a malware sample from Malware Bazaar')
parser.add_argument('-f', '--file', help='the path to the file that contains hashes (sha256) for the samples you want to download\n(keep in mind that daily limit is 2000)', metavar="HASH", required=False, type=argparse.FileType('r'))
parser.add_argument('-a', '--add', help='Get most recent samples on Malware Bazaar', type=str, metavar="Adder", required=False,default="100",  choices=['100', 'time'])
args = parser.parse_args()

#contain the sha256 of the samples
# SamplesFile=open("samples.txt","r")
samplesFile = args.file.name
ZIP_PASSWORD = b'infected'

headers = { "API KEY HERE" }

if args.add:
    data = {
    'query': 'get_recent',
    'selector': str(args.add),
    }
    response = requests.post('https://mb-api.abuse.ch/api/v1/', data=data, timeout=15, headers=headers)
    json_response = response.content.decode("utf-8", "ignore")
    query = ".data[].sha256_hash"
    json_response = jq(query).transform(text=json_response, text_output=True)
    json_response = json_response.split() #transform the string into a list


    new_hashes_list= is_string_in_file(samplesFile, json_response)
    for hash in new_hashes_list:
        append_hash_to_file(samplesFile, hash)

if args.file:
    with open(samplesFile, 'r') as file:
        hashes_to_download = file.readlines()
    for line in hashes_to_download:
        sha256_hash = (line.strip()).strip('"')
        check_sha256(sha256_hash)
        data = {
            'query': 'get_file',
            'sha256_hash': sha256_hash,
        }
        response = requests.post('https://mb-api.abuse.ch/api/v1/', data=data, timeout=15, headers=headers, allow_redirects=True)
        if 'file_not_found' in response.text:
            print("Error: file not found")
            sys.exit()
        else:
            open(sha256_hash+'.zip', 'wb').write(response.content)
            print("Sample \""+sha256_hash+"\" downloaded.")  
            with pyzipper.AESZipFile(sha256_hash+".zip") as zf:
                zf.pwd = ZIP_PASSWORD
                my_secrets = zf.extractall(".")  
                print("Sample \""+sha256_hash+"\" downloaded and unpacked.")   

        


    
        
