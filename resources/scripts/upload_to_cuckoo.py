###################################################################################
#                                                                                 #
# upload_to_cuckoo.py                                                             #
#                                                                                 #
###################################################################################
#                                                                                 #
#    Scorpion Anti-malware is a free Open Source AI-powered Anti-malware          #
#    framework for Researchers.                                                   #
#                                                                                 #
#    Copyright (c) 2024-present  (see AUTHORS.md).                                #
#                                                                                 #
#    This program is free software: you can redistribute it and/or modify         #
#    it under the terms of the GNU General Public License as published by         #
#    the Free Software Foundation, either version 3 of the License, or            #
#    (at your option) any later version.                                          #
#                                                                                 #
#    This program is distributed in the hope that it will be useful,              #
#    but WITHOUT ANY WARRANTY; without even the implied warranty of               #
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                #
#    GNU General Public License for more details.                                 #
#                                                                                 #
#    You should have received a copy of the GNU General Public License            #
#    along with this program.  If not, see <https://www.gnu.org/licenses/>.       #
#                                                                                 #
###################################################################################

from glob import glob
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options
import time
import os

to_upload_paths = glob('') # List of paths to the files to upload
path_to_save = '' # Path to the text file to save the task IDs
chrome_options = Options()
chrome_options.add_argument("--window-size=1920,1080")
chrome_options.add_experimental_option("prefs", {"safebrowsing.enabled": True})

driver = webdriver.Chrome(options=chrome_options)

# Append the task ID to the text file
with open(path_to_save, 'a') as file:
    idx = 0
    while True:
        if idx >= len(to_upload_paths):
            break

        driver.get('https://cuckoo.cert.ee/submit/')
        driver.implicitly_wait(60)

        time.sleep(1)

        file_input = None

        while True:
            try:
                file_input = driver.find_element(By.ID, 'file')

                if file_input == None:
                    raise Exception('File input element not found')

                break
            except Exception as e:
                print(e)
                time.sleep(1)
                continue

        time.sleep(1)

        refresh = False

        # Upload the file by sending the file path to the file input element
        while True:
            try:
                print(f'Uploading {os.path.basename(to_upload_paths[idx])}...\n')
                
                file_input.send_keys(os.path.abspath(to_upload_paths[idx]))

                temp = driver.find_element(By.XPATH, '//*[@id="info"]/span[5]/strong').text

                if temp == 'Something went wrong!':
                    print('Something went wrong! Refreshing the page...\n')
                    refresh = True

                break
            except Exception as e:
                print(e)
                time.sleep(1)
                continue

        if refresh:
            continue

        time.sleep(1)
        
        while True:
            try:
                temp = driver.find_element(By.XPATH, '//*[@id="info"]/span[5]/strong').text

                if temp == 'Something went wrong!':
                    print('Something went wrong! Refreshing the page...\n')
                    refresh = True
                    break

                b1 = None
                b1 = driver.find_element(By.XPATH, '//*[@id="timeout"]/ul/li[1]')

                if b1 == None:
                    raise Exception('Button 1 not found')
                
                b1.click() # TimeOut 60

                break
            except Exception as e:
                print(e)
                time.sleep(1)
                continue

        if refresh:
            continue

        time.sleep(0.5)

        while True:
            try:
                b2 = None
                b2 = driver.find_element(By.XPATH, '//*[@id="options"]/ul/li[3]/label/span')

                if b2 == None:
                    raise Exception('Button 2 not found')
                
                b2.click() # Process Memory Dump

                break
            except Exception as e:
                print(e)
                time.sleep(1)
                continue

        time.sleep(0.5)
        
        while True:
            try:
                b3 = None
                b3 = driver.find_element(By.XPATH, '//*[@id="options"]/ul/li[4]/label/span')

                if b3 == None:
                    raise Exception('Button 3 not found')
                
                b3.click() # Full Memory Dump

                break
            except Exception as e:
                print(e)
                time.sleep(1)
                continue

        time.sleep(0.5)

        while True:
            try:
                b4 = None
                b4 = driver.find_element(By.XPATH, '//*[@id="start-analysis"]')

                if b4 == None:
                    raise Exception('Button 4 not found')
                
                b4.click() # Start Analysis

                break
            except Exception as e:
                print(e)
                time.sleep(1)
                continue

        time.sleep(1)
        
        while True:
            try:
                task_id = driver.find_element(By.XPATH, '//*[@id="submission-task-table"]/tbody').text.split(' ')[0]

                if task_id == '':
                    raise Exception('Task ID not found')

                print(f'Task ID: {task_id}\n')

                # Write the task ID and the name of the file to the text file
                file.write(task_id + ',' + os.path.basename(to_upload_paths[idx]) + '\n')
                file.flush()

                break
            except Exception as e:
                print(e)
                time.sleep(1)
                continue

        time.sleep(1)

        idx += 1
        
driver.quit()
