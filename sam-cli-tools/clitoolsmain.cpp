/**
 *                        بِسْمِ اللَّهِ الرَّحْمَنِ الرَّحِيمِ
 * 
 * clitoolsmain.cpp
 * 
 * Copyright (c) 2024-present Scorpion Anti-malware (see AUTHORS.md).
 * 
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 * 
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * 
 */
#include "clitoolsmain.hpp"

#include "samengine.hpp"

#include <iostream>

int main(int argc, char **argv) {
    // if (argc < 2 || argc > 2) {
    //     std::cout << "You must provide a scan area that contains some samples to scan." << std::endl;
    //     return -1;
    // }

    // std::string scan_area = argv[1];

    // std::cout << "Scanning area: " << scan_area << std::endl;

    bool status {false};

    // SAMEngine engine;
    
    // status = engine.scan();
    // if (!status) {
    //     std::cout << "Scan failed." << std::endl;
    //     return -1;
    // }

    sam_engine::SAMEngine engine;

    engine.engine_main();

    std::this_thread::sleep_for(std::chrono::seconds(5));

    engine.fulfill_start_scan_request();

    std::this_thread::sleep_for(std::chrono::seconds(15));

    engine.fulfill_stop_scan_request();

    std::this_thread::sleep_for(std::chrono::seconds(5));

    engine.fulfill_engine_termination_request();

    return 0;
}
