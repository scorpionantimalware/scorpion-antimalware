set(SAM_ENGINE_TESTS "sam-engine-tests")

file(GLOB SAM_ENGINE_TESTS_SRC_FILES 
    ${CMAKE_CURRENT_SOURCE_DIR}/testsmain.h
    ${CMAKE_CURRENT_SOURCE_DIR}/testsmain.cpp
    # ${CMAKE_CURRENT_SOURCE_DIR}/dummypegenerator.h
    # ${CMAKE_CURRENT_SOURCE_DIR}/dummypegenerator.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/sam-engine/samenginetests.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/sam-engine/byte-pixel-engine/bytepixelenginetests.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/sam-engine/PE-pathls-generator/pepathlscollectortests.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/sam-engine/PE-pathls-generator/pepathlsgeneratortests.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/sam-engine/PE-engine/peenginetests.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/sam-engine/models/staticannpeclassifiertests.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/sam-engine/models/staticcnnpeclassifiertests.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/sam-engine/scan-areas-processor/scanareasprocessortests.cpp
)

# TODO: Is this needed?
enable_testing()

# For Windows: Prevent overriding the parent project's compiler/linker settings as mentioned in the official documentation.
if(WIN32)
    set(gtest_force_shared_crt ON CACHE BOOL "" FORCE)
endif()

set(GTEST_LIBRARIES 
    "GTest::gtest" 
    "GTest::gtest_main" 
)

# Check https://cmake.org/cmake/help/latest/module/FindGTest.html for more information.
find_package(GTest CONFIG)
if(NOT GTest_FOUND)
    if(EXISTS "${SAM_ROOT}/externals/googletest/googletest/include/gtest/gtest.h")
        option(BUILD_SHARED_LIBS "Build shared libraries (DLLs)." ON)
        option(BUILD_GMOCK "Builds the googlemock subproject" OFF)
        option(INSTALL_GTEST "Enable installation of googletest. (Projects embedding googletest may want to turn this OFF.)" OFF)
        option(
            gtest_force_shared_crt
            "Use shared (DLL) run-time lib even when Google Test is built as static lib."
            ON)
            
        message(STATUS "Found GTest: ${SAM_ROOT}/externals/googletest/googletest/include/gtest/gtest.h")
        add_subdirectory("${SAM_ROOT}/externals/googletest" "${SAM_ROOT}/.build/.googletest-build/")
    else()
        message(FATAL_ERROR "Cannot find GTest package.")
    endif()
endif()

# The LIEF version that we are using.
# set(LIEF_VERSION "0.14.1")

# Find LIEF. If LIEF was not installed into a default system directory then
# specify the following option during CMake configuration:
# -DLIEF_DIR=<LIEF install prefix>/share/LIEF/cmake
# find_package(LIEF COMPONENTS SHARED)
# if(NOT LIEF_FOUND)
#     if(EXISTS "${SAM_ROOT}/externals/lief/include/LIEF/LIEF.hpp")
#         option(LIEF_DOC "Build LIEF docs" OFF)
#         option(LIEF_PYTHON_API "Build LIEF Python API" OFF)
#         option(LIEF_EXAMPLES "Build LIEF examples" OFF)
#         option(LIEF_TESTS "Build LIEF tests" OFF)
#         option(LIEF_INSTALL "Generate the install target." OFF)

#         if(MSVC)
#             set(CMAKE_MSVC_RUNTIME_LIBRARY "MultiThreaded" CACHE STRING "CRT option")
#         endif()

#         message(STATUS "Found LIEF: ${SAM_ROOT}/externals/lief/include/LIEF/LIEF.hpp")
#         add_subdirectory("${SAM_ROOT}/externals/lief" "${SAM_ROOT}/.build/.lief-build/")
#     else()
#         message(FATAL_ERROR "Cannot find LIEF package.")
#     endif()
# endif()

add_executable(${SAM_ENGINE_TESTS} ${SAM_ENGINE_TESTS_SRC_FILES})

set_target_properties(${SAM_ENGINE_TESTS} PROPERTIES 
    VERSION ${SAM_PROJECT_VERSION}
    # LINK_FLAGS "/ignore:4197" # Ignore the warning LNK4197
)

target_link_libraries(${SAM_ENGINE_TESTS} PRIVATE 
    ${GTEST_LIBRARIES} 
    # LIEF::LIEF
    ${SAM_ENGINE} 
)

# When we use any header inside ${SAM_ENGINE_TESTS}, it must know where these headers are.
target_include_directories(${SAM_ENGINE_TESTS} PRIVATE 
    "${CMAKE_CURRENT_SOURCE_DIR}/" 
    "${SAM_ROOT}/externals/googletest/googletest/include/" 
    # "${SAM_ROOT}/externals/lief/include/" 
)

# Specify the directory containing the shared libraries.
set(PE_ENGINE_LIB_DIR "${PROJECT_BINARY_DIR}/sam-engine/PE-engine/Debug")
set(BYTE_PIXEL_ENGINE_LIB_DIR "${PROJECT_BINARY_DIR}/sam-engine/byte-pixel-engine/Debug")
set(PE_PATHLS_GENERATOR_LIB_DIR "${PROJECT_BINARY_DIR}/sam-engine/PE-pathls-generator/Debug")
set(SAM_MODELS_LIB_DIR "${PROJECT_BINARY_DIR}/sam-engine/models/Debug")
set(SCAN_AREAS_PROCESSOR_LIB_DIR "${PROJECT_BINARY_DIR}/sam-engine/scan-areas-processor/Debug")
set(SAM_ENGINE_LIB_DIR "${PROJECT_BINARY_DIR}/sam-engine/Debug")

# TODO: Why copy_if_different isn't working?
# Copy the shared libraries to the executable directory.
file(GLOB SAM_DLLS 
    "${PE_ENGINE_LIB_DIR}/${PE_ENGINE}.dll"
    "${BYTE_PIXEL_ENGINE_LIB_DIR}/${BYTE_PIXEL_ENGINE}.dll"
    "${PE_PATHLS_GENERATOR_LIB_DIR}/${PE_PATHLS_GENERATOR}.dll"
    "${SAM_MODELS_LIB_DIR}/${SAM_MODELS}.dll"
    "${SAM_ENGINE_LIB_DIR}/${SAM_ENGINE}.dll"
    "${SCAN_AREAS_PROCESSOR_LIB_DIR}/${SCAN_AREAS_PROCESSOR}.dll"
)
foreach(SAM_DLL ${SAM_DLLS})
    add_custom_command(TARGET ${SAM_ENGINE_TESTS} POST_BUILD
                    COMMAND ${CMAKE_COMMAND} -E copy ${SAM_DLL} $<TARGET_FILE_DIR:${SAM_ENGINE_TESTS}>
                    COMMENT "Copying ${SAM_DLL} to the executable directory."
    )
endforeach()

# Copy the GTest dlls to the executable directory.
file(GLOB GTEST_DLLS 
    "${PROJECT_BINARY_DIR}/bin/Debug/gtest.dll" 
    "${PROJECT_BINARY_DIR}/bin/Debug/gtest_main.dll" 
)
foreach(GTEST_DLL ${GTEST_DLLS})
    add_custom_command(TARGET ${SAM_ENGINE_TESTS} POST_BUILD
                    COMMAND ${CMAKE_COMMAND} -E copy ${GTEST_DLL}  $<TARGET_FILE_DIR:${SAM_ENGINE_TESTS}>
                    COMMENT "Copying ${GTEST_DLL} to the executable directory."
    )
endforeach()

# Copy the onnx dlls to the executable directory.
if (MSVC)
    file(GLOB ORT_DLLS 
        "${ONNXRUNTIME_ROOTDIR}/lib/onnxruntime.dll"
        "${ONNXRUNTIME_ROOTDIR}/lib/onnxruntime_providers_shared.dll"
    )
    foreach(ORT_DLL ${ORT_DLLS})
        add_custom_command(TARGET ${SAM_ENGINE_TESTS} POST_BUILD
                        COMMAND ${CMAKE_COMMAND} -E copy ${ORT_DLL}  $<TARGET_FILE_DIR:${SAM_ENGINE_TESTS}>
                        COMMENT "Copying ${ORT_DLL} to the executable directory."
        )
    endforeach()
endif()

# Copy the lief dlls to the executable directory.
# file(GLOB LIEF_DLLS 
#     "${PROJECT_BINARY_DIR}/.lief-build/Debug/LIEF.dll" 
# )
# foreach(LIEF_DLL ${LIEF_DLLS})
#     add_custom_command(TARGET ${SAM_ENGINE_TESTS} POST_BUILD
#                     COMMAND ${CMAKE_COMMAND} -E copy ${LIEF_DLL}  $<TARGET_FILE_DIR:${SAM_ENGINE_TESTS}>
#                     COMMENT "Copying ${LIEF_DLL} to the executable directory."
#     )
# endforeach()

# Copy the model to the executable directory.
file(GLOB SAM_MODELS 
    "${STATIC_ANN_ONNX_MODELPATH}"
    "${STATIC_ANN_STANDARDIZE_PARAMS}"
    "${STATIC_CNN_ONNX_MODELPATH}"
    "${STATIC_CNN_COLORMAP}"
)
foreach(SAM_MODEL ${SAM_MODELS})
    add_custom_command(TARGET ${SAM_ENGINE_TESTS} POST_BUILD
                    COMMAND ${CMAKE_COMMAND} -E copy ${SAM_MODEL} $<TARGET_FILE_DIR:${SAM_ENGINE_TESTS}>
                    COMMENT "Copying ${SAM_MODEL} to the executable directory."
    )
endforeach()

# TODO: Why is this needed?
add_test(NAME ${SAM_ENGINE_TESTS} COMMAND ${SAM_ENGINE_TESTS})
