###################################################################################
#                                                                                 #
# CMakeLists.txt                                                                  #
#                                                                                 #
###################################################################################
#                                                                                 #
#    Scorpion Anti-malware is a free Open Source AI-powered Anti-malware          #
#    framework for Researchers.                                                   #
#                                                                                 #
#    Copyright (c) 2024-present  (see AUTHORS.md).                                #
#                                                                                 #
#    This program is free software: you can redistribute it and/or modify         #
#    it under the terms of the GNU General Public License as published by         #
#    the Free Software Foundation, either version 3 of the License, or            #
#    (at your option) any later version.                                          #
#                                                                                 #
#    This program is distributed in the hope that it will be useful,              #
#    but WITHOUT ANY WARRANTY; without even the implied warranty of               #
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                #
#    GNU General Public License for more details.                                 #
#                                                                                 #
#    You should have received a copy of the GNU General Public License            #
#    along with this program.  If not, see <https://www.gnu.org/licenses/>.       #
#                                                                                 #
###################################################################################

# TODO: We can use an older version of CMake.
cmake_minimum_required(VERSION 3.5)

# Set default build type
if(NOT CMAKE_BUILD_TYPE)
  message(STATUS "Build type not set - defaulting to Debug")
  set(
    CMAKE_BUILD_TYPE "Debug"
    CACHE
      STRING
      "Choose the type of build from:  Debug Release RelWithDebInfo MinSizeRel."
    FORCE)
endif()

set(SAM_ORG_NAME "Scorpion Anti-malware")

set(SAM_PROJECT_NAME "Scorpion Anti-malware")

set(SAM_PROJECT_VERSION "1.0.0")
set(SAM_PROJECT_DESCRIPTION "Scorpion Anti-malware Engine.")

set(SAM_EXECUTABLE_NAME "scorpion-antimalware")

project(${SAM_EXECUTABLE_NAME} VERSION ${SAM_PROJECT_VERSION} LANGUAGES CXX)

if (WIN32)
    string(APPEND CMAKE_CXX_FLAGS " /W4")
else()
    string(APPEND CMAKE_CXX_FLAGS " -Wall -Wextra")
    string(APPEND CMAKE_C_FLAGS " -Wall -Wextra")

    # SAM engine require a Windows build environment
    message(WARNING "Scorpion Anti-malware engine requires a Windows build environment.")
endif()

option(SAM_BUILD_PYTHON "Build Python binaries" OFF)
option(SAM_BUILD_TESTS "Builds Scorpion Anti-malware console and links the engine." OFF)
option(SAM_BUILD_CLI_TOOLS "Builds Scorpion Anti-malware CLI tools." OFF)
option(SAM_LINK_CONSOLE "Builds Scorpion Anti-malware console and links the engine." OFF)
option(SAM_STATIC_ANN_ONNX_MODELPATH "Static ANN onnx model path.")
option(SAM_STATIC_ANN_STANDARDIZE_PARAMS "Static ANN standardize parameters.")
option(SAM_STATIC_CNN_ONNX_MODELPATH "Static CNN onnx model path.")
option(SAM_STATIC_CNN_COLORMAP "Static CNN colormap.")
option(SAM_DYNAMIC_CNN_BIGRU_ONNX_MODELPATH "Dynamic CNN BiGRU onnx model path.")

# onnxruntime providers
option(SAM_onnxruntime_USE_CUDA "Build onnx with CUDA support." OFF)
option(SAM_onnxruntime_USE_TENSORRT "Build with TensorRT support." OFF)
option(SAM_ONNXRUNTIME_ROOTDIR "onnxruntime root dir.")

# Safety check to ensure that builds are not performed in the source directory.
if(${PROJECT_SOURCE_DIR} STREQUAL ${PROJECT_BINARY_DIR})
  message(
    FATAL_ERROR
      "In-source builds not allowed. Please make a new directory (called a build directory) and run CMake from there.\n"
  )
endif()

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# Disable compiler-specific extensions for cross-platform compatibility.
set(CMAKE_CXX_EXTENSIONS OFF)

set(SAM_ROOTDIR ${PROJECT_SOURCE_DIR})

if(MSVC)
    string(APPEND CMAKE_CXX_FLAGS " /EHsc /wd26812")
    string(APPEND CMAKE_C_FLAGS " /EHsc /wd26812")
endif()

# Disable C++ exceptions.
if(MSVC)
    string(REGEX REPLACE "/EHsc" "/EHs-c-" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
    add_definitions(-D_HAS_EXCEPTIONS=0)
else()
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fno-exceptions -fno-unwind-tables -fno-asynchronous-unwind-tables")
endif()

# Check https://stackoverflow.com/q/33062728/14629018 for more information.
if(MSVC)
    set(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS TRUE)
endif()

#################################################

message(STATUS "Building Scorpion Anti-malware engine as a library...")
set(SAM_ENGINE_ROOTDIR "${SAM_ROOTDIR}/sam-engine")
add_subdirectory(${SAM_ENGINE_ROOTDIR})

# If we are not linking the console, then we don't need the UI thread.
if (NOT SAM_LINK_CONSOLE)
    target_compile_definitions(${SAM_ENGINE} PRIVATE 
        -USAM_ENGINE_ENABLE_UI_THREAD
    )
endif()

#################################################
#
# Scorpion Anti-malware CLI Tools
#
#################################################

if (SAM_BUILD_CLI_TOOLS)
    message(STATUS "Building Scorpion Anti-malware CLI tools...")
    set(SAM_CLI_TOOLS_ROOTDIR "${SAM_ROOTDIR}/sam-cli-tools")
    add_subdirectory(${SAM_CLI_TOOLS_ROOTDIR})
endif()

#################################################
#
# Scorpion Anti-malware Tests
#
#################################################

if (SAM_BUILD_TESTS)
    message(STATUS "Building Scorpion Anti-malware tests...")
    set(SAM_TESTS_ROOTDIR "${SAM_ROOTDIR}/tests")
    add_subdirectory(${SAM_TESTS_ROOTDIR})
endif()

#################################################
#
# Scorpion Anti-malware Console
#
#################################################

if (SAM_LINK_CONSOLE)
    # Enable the UI thread for the engine.
    target_compile_definitions(${SAM_ENGINE} PRIVATE 
        SAM_ENGINE_ENABLE_UI_THREAD
    )

    message(STATUS "Building Scorpion Anti-malware console...")
    set(SAM_CONSOLE_ROOTDIR "${SAM_ROOTDIR}/sam-console")
    add_subdirectory(${SAM_CONSOLE_ROOTDIR})

    # Find Qt
    # TODO: Remove this from here.
    find_package(Qt${SAM_CONSOLE_QT_VERSION} CONFIG REQUIRED COMPONENTS Widgets SvgWidgets)

    add_executable(${SAM_EXECUTABLE_NAME} WIN32 
        ${SAM_CONSOLE_MAIN_ENTRY} 
        ${SAM_CONSOLE_CPP_FILES} 
    )

    target_compile_definitions(${SAM_EXECUTABLE_NAME} PRIVATE 
        SAM_NO_EXCEPTIONS 
        SAM_CONSOLE_ROOTDIR="${SAM_CONSOLE_ROOTDIR}" 
    )

    # Enable AUTOMOC for the SAM_EXECUTABLE_NAME target only.
    # TODO: Remove this from here.
    set_target_properties(${SAM_EXECUTABLE_NAME} PROPERTIES 
        AUTOMOC ON 
    )

    message(STATUS "Linking Scorpion Anti-malware engine to the console...")
    target_link_libraries(${SAM_EXECUTABLE_NAME} PRIVATE 
        Qt${SAM_CONSOLE_QT_VERSION}::Widgets 
        Qt${SAM_CONSOLE_QT_VERSION}::SvgWidgets 
        ${SAM_ENGINE} 
    )

    target_include_directories(${SAM_EXECUTABLE_NAME} PRIVATE 
        ${${SAM_CONSOLE_EXECUTABLE_NAME}_INCLUDE_DIRECTORIES} 
    )

    target_compile_definitions(${SAM_EXECUTABLE_NAME} PRIVATE 
        SAM_ORG_NAME="${SAM_ORG_NAME}"
        SAM_CONSOLE_PROJECT_NAME="${SAM_CONSOLE_PROJECT_NAME}"
        SAM_CONSOLE_PROJECT_VERSION="${SAM_CONSOLE_PROJECT_VERSION}"
    )

    # Specify the directory containing the shared libraries.
    set(SAM_PE_ENGINE_BUILD_ROOTDIR "${PROJECT_BINARY_DIR}/sam-engine/PE-engine")
    set(SAM_BYTE_PIXEL_ENGINE_BUILD_ROOTDIR "${PROJECT_BINARY_DIR}/sam-engine/byte-pixel-engine")
    set(SAM_PE_PATHLS_GENERATOR_BUILD_ROOTDIR "${PROJECT_BINARY_DIR}/sam-engine/PE-pathls-generator")
    set(SAM_MODELS_BUILD_ROOTDIR "${PROJECT_BINARY_DIR}/sam-engine/models")
    set(SAM_SCAN_AREAS_PROCESSOR_BUILD_ROOTDIR "${PROJECT_BINARY_DIR}/sam-engine/scan-areas-processor")
    set(SAM_ENGINE_BUILD_ROOTDIR "${PROJECT_BINARY_DIR}/sam-engine")
    set(SAM_DYNAMICS_ENGINE_BUILD_ROOTDIR "${PROJECT_BINARY_DIR}/sam-engine/dynamics-engine")
    set(SAM_SCAN_ANALYZER_BUILD_ROOTDIR "${PROJECT_BINARY_DIR}/sam-engine/scan-analyzer")
    set(SAM_FIM_BUILD_ROOTDIR "${PROJECT_BINARY_DIR}/sam-engine/FIM")

    # TODO: Why copy_if_different isn't working?
    # Copy the shared libraries to the executable directory.
    file(GLOB SAM_ENGINE_DLLS 
        "${SAM_PE_ENGINE_BUILD_ROOTDIR}/Debug/${SAM_PE_ENGINE}.dll"
        "${SAM_BYTE_PIXEL_ENGINE_BUILD_ROOTDIR}/Debug/${SAM_BYTE_PIXEL_ENGINE}.dll"
        "${SAM_PE_PATHLS_GENERATOR_BUILD_ROOTDIR}/Debug/${SAM_PE_PATHLS_GENERATOR}.dll"
        "${SAM_MODELS_BUILD_ROOTDIR}/Debug/${SAM_MODELS}.dll"
        "${SAM_ENGINE_BUILD_ROOTDIR}/Debug/${SAM_ENGINE}.dll"
        "${SAM_SCAN_AREAS_PROCESSOR_BUILD_ROOTDIR}/Debug/${SAM_SCAN_AREAS_PROCESSOR}.dll"
        "${SAM_DYNAMICS_ENGINE_BUILD_ROOTDIR}/Debug/${SAM_DYNAMICS_ENGINE}.dll"
        "${SAM_SCAN_ANALYZER_BUILD_ROOTDIR}/Debug/${SAM_SCAN_ANALYZER}.dll"
        "${SAM_FIM_BUILD_ROOTDIR}/Debug/${SAM_FIM}.dll"
    )

    # Safety check: Ensure that all the files exist.
    foreach(file ${SAM_ENGINE_DLLS})
        if(NOT EXISTS "${file}")
            message(FATAL_ERROR "File '${file}' does not exist!")
        endif()
    endforeach()

    foreach(SAM_ENGINE_DLL ${SAM_ENGINE_DLLS})
        add_custom_command(TARGET ${SAM_EXECUTABLE_NAME} POST_BUILD
                        COMMAND ${CMAKE_COMMAND} -E copy ${SAM_ENGINE_DLL} $<TARGET_FILE_DIR:${SAM_EXECUTABLE_NAME}>
                        COMMENT "Copying ${SAM_ENGINE_DLL} to the executable directory."
        )
    endforeach()

    # Specify the directory containing the shared libraries.
    set(SAM_CONSOLE_BUILD_ROOTDIR "${PROJECT_BINARY_DIR}/sam-console")

    # TODO: Why copy_if_different isn't working?
    # Copy the shared libraries to the executable directory.
    file(GLOB SAM_CONSOLE_DLLS 
        "${SAM_CONSOLE_BUILD_ROOTDIR}/Debug/${SAM_CONSOLE}.dll"
    )

    # Safety check: Ensure that all the files exist.
    foreach(file ${SAM_CONSOLE_DLLS})
        if(NOT EXISTS "${file}")
            message(FATAL_ERROR "File '${file}' does not exist!")
        endif()
    endforeach()

    # Copy the shared libraries to the executable directory.
    foreach(SAM_CONSOLE_DLL ${SAM_CONSOLE_DLLS})
        add_custom_command(TARGET ${SAM_EXECUTABLE_NAME} POST_BUILD
                        COMMAND ${CMAKE_COMMAND} -E copy ${SAM_CONSOLE_DLL} $<TARGET_FILE_DIR:${SAM_EXECUTABLE_NAME}>
                        COMMENT "Copying ${SAM_CONSOLE_DLL} to the executable directory."
        )
    endforeach()

    # Copy the onnx dlls to the executable directory.
    if (MSVC)
        file(GLOB SAM_ORT_DLLS 
            "${SAM_ONNXRUNTIME_ROOTDIR}/lib/onnxruntime.dll" 
        )

        # Safety check: Ensure that all the files exist.
        foreach(file ${SAM_ORT_DLLS})
            if(NOT EXISTS "${file}")
                message(FATAL_ERROR "File '${file}' does not exist!")
            endif()
        endforeach()

        foreach(SAM_ORT_DLL ${SAM_ORT_DLLS})
            add_custom_command(TARGET ${SAM_EXECUTABLE_NAME} POST_BUILD
                            COMMAND ${CMAKE_COMMAND} -E copy ${SAM_ORT_DLL}  $<TARGET_FILE_DIR:${SAM_EXECUTABLE_NAME}>
                            COMMENT "Copying ${SAM_ORT_DLL} to the executable directory."
            )
        endforeach()

        # Install the onnx dlls to the executable directory.
        install(FILES ${SAM_ORT_DLLS} DESTINATION .)
    endif()

    # Install the library and the header files.
    # This is for CPack to be able to package the library.
    set(SAM_LICENSE_FILE "${SAM_ROOTDIR}/LICENSE")
    install(TARGETS ${SAM_EXECUTABLE_NAME} RUNTIME DESTINATION .)
    install(FILES "${SAM_LICENSE_FILE}" DESTINATION .)

    # Include the icon file in the executable (Windows-specific)
    if(WIN32)
        set_target_properties(${SAM_EXECUTABLE_NAME} PROPERTIES WIN32_EXECUTABLE TRUE)
        set(favicon_rc "${CMAKE_BINARY_DIR}/favicon.rc")
        file(GENERATE OUTPUT ${favicon_rc} CONTENT "IDI_FAVICON ICON DISCARDABLE \"${SAM_ROOTDIR}/resources/platforms/windows/favicon.ico\"")
        target_sources(${SAM_EXECUTABLE_NAME} PRIVATE ${favicon_rc})
    endif()

    #################################################
    #
    # Packaging
    #
    #################################################
    include(InstallRequiredSystemLibraries)
    set(CPACK_PACKAGE_NAME ${SAM_PROJECT_NAME})
    # set(CPACK_PACKAGE_VERSION ${SAM_PROJECT_VERSION})
    set(CPACK_PACKAGE_VENDOR ${SAM_ORG_NAME})
    set(CPACK_PACKAGE_DESCRIPTION_SUMMARY ${SAM_PROJECT_DESCRIPTION})

    set(CPACK_RESOURCE_FILE_LICENSE "${SAM_LICENSE_FILE}")

    set(CPACK_PACKAGE_VERSION_MAJOR "${${SAM_EXECUTABLE_NAME}_VERSION_MAJOR}")
    set(CPACK_PACKAGE_VERSION_MINOR "${${SAM_EXECUTABLE_NAME}_VERSION_MINOR}")

    # Specify the icon file for CPack (NSIS specific)
    set(CPACK_NSIS_MUI_ICON "${SAM_ROOTDIR}/resources/platforms/windows/favicon.ico")

    include(CPack)

endif()
