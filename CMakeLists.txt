# TODO: We can use an older version of CMake.
cmake_minimum_required(VERSION 3.5)

# Set default build type
if(NOT CMAKE_BUILD_TYPE)
  message(STATUS "Build type not set - defaulting to Debug")
  set(
    CMAKE_BUILD_TYPE "Debug"
    CACHE
      STRING
      "Choose the type of build from: Debug Release."
    FORCE)
endif()

set(SAM_PROJECT_NAME "scorpion-antimalware")

set(SAM_PROJECT_VERSION "1.0.0")
set(SAM_PROJECT_DESCRIPTION "Scorpion Anti-malware Engine.")

project(${SAM_PROJECT_NAME} VERSION ${SAM_PROJECT_VERSION} LANGUAGES CXX)

if (WIN32)
    string(APPEND CMAKE_CXX_FLAGS " /W4")
else()
    string(APPEND CMAKE_CXX_FLAGS " -Wall -Wextra")
    string(APPEND CMAKE_C_FLAGS " -Wall -Wextra")

    # SAM engine require a Windows build environment
    message(WARNING "Scorpion Anti-malware engine requires a Windows build environment.")
endif()

option(SAM_BUILD_PYTHON "Build Python binaries" OFF)
option(SAM_BUILD_TESTS "Builds Scorpion Anti-malware console and links the engine." OFF)
option(SAM_BUILD_CLI_TOOLS "Builds Scorpion Anti-malware CLI tools." OFF)
option(SAM_LINK_CONSOLE "Builds Scorpion Anti-malware console and links the engine." OFF)
option(SAM_STATIC_ANN_ONNX_MODELPATH "Static ANN onnx model path.")
option(SAM_STATIC_ANN_STANDARDIZE_PARAMS "Static ANN standardize parameters.")
option(SAM_STATIC_CNN_ONNX_MODELPATH "Static CNN onnx model path.")
option(SAM_STATIC_CNN_COLORMAP "Static CNN colormap.")

# onnxruntime providers
option(SAM_onnxruntime_USE_CUDA "Build onnx with CUDA support." OFF)
option(SAM_onnxruntime_USE_TENSORRT "Build with TensorRT support." OFF)
option(SAM_ONNXRUNTIME_ROOTDIR "onnxruntime root dir.")

# Safety check to ensure that builds are not performed in the source directory.
if(${PROJECT_SOURCE_DIR} STREQUAL ${PROJECT_BINARY_DIR})
  message(
    FATAL_ERROR
      "In-source builds not allowed. Please make a new directory (called a build directory) and run CMake from there.\n"
  )
endif()

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

set(SAM_ROOTDIR ${PROJECT_SOURCE_DIR})

if(MSVC)
    string(APPEND CMAKE_CXX_FLAGS " /EHsc /wd26812")
    string(APPEND CMAKE_C_FLAGS " /EHsc /wd26812")
endif()

add_compile_definitions("SAM_NO_EXCEPTIONS")

# Disable C++ exceptions.
if(MSVC)
    string(REGEX REPLACE "/EHsc" "/EHs-c-" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
    add_definitions(-D_HAS_EXCEPTIONS=0)
else()
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fno-exceptions -fno-unwind-tables -fno-asynchronous-unwind-tables")
endif()

# Check https://stackoverflow.com/q/33062728/14629018 for more information.
if(MSVC)
    set(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS TRUE)
endif()

# Set default root directory for onnxruntime
if(NOT SAM_ONNXRUNTIME_ROOTDIR)
    if(WIN32)
        set(SAM_ONNXRUNTIME_ROOTDIR "C:/Program Files/onnxruntime")
    else()
        set(SAM_ONNXRUNTIME_ROOTDIR "/usr/local")
    endif()
endif()

# I don't know what is this but I got it from: https://github.com/microsoft/onnxruntime-inference-examples/blob/main/c_cxx/CMakeLists.txt :)
if(SAM_onnxruntime_USE_CUDA)
    add_definitions(-DUSE_CUDA)
endif()
if(SAM_onnxruntime_USE_TENSORRT)
    add_definitions(-DUSE_TENSORRT)
endif()
if(onnxruntime_USE_DML)
    message("Enabling DML")
    add_definitions(-DUSE_DML)
endif()

# If there is no ANN model file specified, then we can't build the project.
if(NOT SAM_STATIC_ANN_ONNX_MODELPATH)
    message(FATAL_ERROR "Static ANN onnx model path not set")
endif()

if (NOT EXISTS ${SAM_STATIC_ANN_ONNX_MODELPATH})
  message(FATAL_ERROR "${SAM_STATIC_ANN_ONNX_MODELPATH} not found.")
endif()

if(NOT SAM_STATIC_ANN_STANDARDIZE_PARAMS)
    message(FATAL_ERROR "Static ANN standardize parameters not set")
endif()

if (NOT EXISTS ${SAM_STATIC_ANN_STANDARDIZE_PARAMS})
  message(FATAL_ERROR "${SAM_STATIC_ANN_STANDARDIZE_PARAMS} not found.")
endif()

# if there is no CNN model file specified, then we can't build the project.
if(NOT SAM_STATIC_CNN_ONNX_MODELPATH)
    message(FATAL_ERROR "Static CNN onnx model path not set")
endif()

if (NOT EXISTS ${SAM_STATIC_CNN_ONNX_MODELPATH})
  message(FATAL_ERROR "${SAM_STATIC_CNN_ONNX_MODELPATH} not found.")
endif()

if(NOT SAM_STATIC_CNN_COLORMAP)
    message(FATAL_ERROR "Static CNN colormap not set")
endif()

if (NOT EXISTS ${SAM_STATIC_CNN_COLORMAP})
  message(FATAL_ERROR "${SAM_STATIC_CNN_COLORMAP} not found.")
endif()

message(STATUS "Building Scorpion Anti-malware engine as a library...")
set(SAM_ENGINE_ROOTDIR "${CMAKE_CURRENT_SOURCE_DIR}/sam-engine")
add_subdirectory(${SAM_ENGINE_ROOTDIR})

#################################################
#
# Scorpion Anti-malware CLI Tools
#
#################################################

if (SAM_BUILD_CLI_TOOLS)
    message(STATUS "Building Scorpion Anti-malware CLI tools...")
    set(SAM_CLI_TOOLS_ROOTDIR "${CMAKE_CURRENT_SOURCE_DIR}/sam-cli-tools")
    add_subdirectory(${SAM_CLI_TOOLS_ROOTDIR})
endif()

#################################################
#
# Scorpion Anti-malware Tests
#
#################################################

if (SAM_BUILD_TESTS)
    message(STATUS "Building Scorpion Anti-malware tests...")
    set(SAM_TESTS_ROOTDIR "${CMAKE_CURRENT_SOURCE_DIR}/tests")
    add_subdirectory(${SAM_TESTS_ROOTDIR})
endif()

#################################################
#
# Scorpion Anti-malware Console
#
#################################################

if (SAM_LINK_CONSOLE)
    message(STATUS "Building Scorpion Anti-malware console...")
    set(SAM_CONSOLE_ROOTDIR "${CMAKE_CURRENT_SOURCE_DIR}/sam-console")
    add_subdirectory(${SAM_CONSOLE_ROOTDIR})

    # Find Qt
    # TODO: Remove this from here.
    find_package(Qt${SAM_CONSOLE_QT_VERSION} CONFIG REQUIRED COMPONENTS Core Widgets)

    add_executable(${SAM_PROJECT_NAME} WIN32 
        ${SAM_CONSOLE_MAIN_ENTRY} 
        ${SAM_CONSOLE_SRC_FILES} 
    )

    # Enable AUTOMOC for the SAM_PROJECT_NAME target only.
    # TODO: Remove this from here.
    set_target_properties(${SAM_PROJECT_NAME} PROPERTIES 
        AUTOMOC ON 
    )

    message(STATUS "Linking Scorpion Anti-malware engine to the console...")
    target_link_libraries(${SAM_PROJECT_NAME} PRIVATE 
        Qt${SAM_CONSOLE_QT_VERSION}::Widgets 
        ${SAM_ENGINE} 
    )

    target_include_directories(${SAM_PROJECT_NAME} PRIVATE 
        "${SAM_CONSOLE_ROOTDIR}/" 
        "${SAM_CONSOLE_ROOTDIR}/control-bar/" 
        "${SAM_CONSOLE_ROOTDIR}/status-viewer/" 
    )

    # Specify the directory containing the shared libraries.
    set(SAM_PE_ENGINE_BUILD_ROOTDIR "${PROJECT_BINARY_DIR}/sam-engine/PE-engine")
    set(SAM_BYTE_PIXEL_ENGINE_BUILD_ROOTDIR "${PROJECT_BINARY_DIR}/sam-engine/byte-pixel-engine")
    set(SAM_PE_PATHLS_GENERATOR_BUILD_ROOTDIR "${PROJECT_BINARY_DIR}/sam-engine/PE-pathls-generator")
    set(SAM_MODELS_BUILD_ROOTDIR "${PROJECT_BINARY_DIR}/sam-engine/models")
    set(SAM_SCAN_AREAS_PROCESSOR_BUILD_ROOTDIR "${PROJECT_BINARY_DIR}/sam-engine/scan-areas-processor")
    set(SAM_ENGINE_BUILD_ROOTDIR "${PROJECT_BINARY_DIR}/sam-engine")

    # TODO: Why copy_if_different isn't working?
    # Copy the shared libraries to the executable directory.
    file(GLOB SAM_ENGINE_DLLS 
        "${SAM_PE_ENGINE_BUILD_ROOTDIR}/Debug/${PE_ENGINE}.dll"
        "${SAM_BYTE_PIXEL_ENGINE_BUILD_ROOTDIR}/Debug/${BYTE_PIXEL_ENGINE}.dll"
        "${SAM_PE_PATHLS_GENERATOR_BUILD_ROOTDIR}/Debug/${PE_PATHLS_GENERATOR}.dll"
        "${SAM_MODELS_BUILD_ROOTDIR}/Debug/${SAM_MODELS}.dll"
        "${SAM_ENGINE_BUILD_ROOTDIR}/Debug/${SAM_ENGINE}.dll"
        "${SAM_SCAN_AREAS_PROCESSOR_BUILD_ROOTDIR}/Debug/${SCAN_AREAS_PROCESSOR}.dll"
    )

    # Safety check: Ensure that all the files exist.
    foreach(file ${SAM_ENGINE_DLLS})
        if(NOT EXISTS "${file}")
            message(FATAL_ERROR "File '${file}' does not exist!")
        endif()
    endforeach()

    foreach(SAM_ENGINE_DLL ${SAM_ENGINE_DLLS})
        add_custom_command(TARGET ${SAM_PROJECT_NAME} POST_BUILD
                        COMMAND ${CMAKE_COMMAND} -E copy ${SAM_ENGINE_DLL} $<TARGET_FILE_DIR:${SAM_PROJECT_NAME}>
                        COMMENT "Copying ${SAM_ENGINE_DLL} to the executable directory."
        )
    endforeach()

    # Specify the directory containing the shared libraries.
    set(SAM_CONSOLE_BUILD_ROOTDIR "${PROJECT_BINARY_DIR}/sam-console")

    # TODO: Why copy_if_different isn't working?
    # Copy the shared libraries to the executable directory.
    file(GLOB SAM_CONSOLE_DLLS 
        "${SAM_CONSOLE_BUILD_ROOTDIR}/Debug/${SAM_CONSOLE}.dll"
    )

    # Safety check: Ensure that all the files exist.
    foreach(file ${SAM_CONSOLE_DLLS})
        if(NOT EXISTS "${file}")
            message(FATAL_ERROR "File '${file}' does not exist!")
        endif()
    endforeach()

    # Copy the shared libraries to the executable directory.
    foreach(SAM_CONSOLE_DLL ${SAM_CONSOLE_DLLS})
        add_custom_command(TARGET ${SAM_PROJECT_NAME} POST_BUILD
                        COMMAND ${CMAKE_COMMAND} -E copy ${SAM_CONSOLE_DLL} $<TARGET_FILE_DIR:${SAM_PROJECT_NAME}>
                        COMMENT "Copying ${SAM_CONSOLE_DLL} to the executable directory."
        )
    endforeach()

endif()
