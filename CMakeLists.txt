# TODO: We can use an older version of CMake.
cmake_minimum_required(VERSION 3.5)

if (CMAKE_BUILD_TYPE MATCHES "Debug")
    add_definitions(-DSCORPION_ANTIMALWARE_DEBUG)
endif()

set(SAM_PROJECT_NAME "scorpion-antimalware")

set(SAM_PROJECT_VERSION "1.0.0")
set(SAM_PROJECT_DESCRIPTION "Scorpion Anti-malware Engine.")

project(${SAM_PROJECT_NAME} VERSION ${SAM_PROJECT_VERSION} LANGUAGES CXX)

# Safety net
if(${PROJECT_SOURCE_DIR} STREQUAL ${PROJECT_BINARY_DIR})
  message(
    FATAL_ERROR
      "In-source builds not allowed. Please make a new directory (called a build directory) and run CMake from there.\n"
  )
endif()

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# Check https://stackoverflow.com/q/33062728/14629018 for more information.
if(MSVC)
    set(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS TRUE)
endif()

message(STATUS "Building Scorpion Anti-malware engine as a library...")
add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/sam-engine/)

#################################################
#
# Scorpion Anti-malware Tests
#
#################################################

option(BUILD_TESTS "Builds Scorpion Anti-malware console and links the engine." OFF)

if (BUILD_TESTS)
    message(STATUS "Building Scorpion Anti-malware tests...")
    add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/tests/)
endif()

#################################################
#
# Scorpion Anti-malware Console
#
#################################################

option(LINK_CONSOLE "Builds Scorpion Anti-malware console and links the engine." OFF)

if (LINK_CONSOLE)
    message(STATUS "Building Scorpion Anti-malware console...")
    add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/sam-console/)

    add_executable(${SAM_PROJECT_NAME} WIN32 
        ${CMAKE_CURRENT_SOURCE_DIR}/sam-console/main.cpp
    )

    message(STATUS "Linking Scorpion Anti-malware engine to the console...")
    target_link_libraries(${SAM_PROJECT_NAME} PRIVATE 
        ${SAM_ENGINE} 
        ${SAM_CONSOLE} 
    )

    target_include_directories(${SAM_PROJECT_NAME} PRIVATE 
        "${CMAKE_CURRENT_SOURCE_DIR}/sam-engine/"
    )

    # Specify the directory containing the shared libraries.
    set(SAM_CONSOLE_LIB_DIR "${PROJECT_BINARY_DIR}/sam-console/Debug")

    # Specify the shared libraries.
    set(SAM_CONSOLE_LIB_DLL "${SAM_CONSOLE}.dll")
    
    # Copy the shared libraries to the executable directory.
    add_custom_command(TARGET ${SAM_PROJECT_NAME} POST_BUILD
        COMMAND ${CMAKE_COMMAND} -E copy
                "${SAM_CONSOLE_LIB_DIR}/${SAM_CONSOLE_LIB_DLL}"
                "$<TARGET_FILE_DIR:${SAM_PROJECT_NAME}>"
        COMMENT "Copying ${SAM_CONSOLE_LIB_DLL} to the executable directory."
    )

endif()
